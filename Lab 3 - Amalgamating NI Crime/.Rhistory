list.files(path='.')
list.files(path='2015-01.')
location <- '2015-01'
filename <- '2015-01-northern-ireland-street.csv'
x <- location + '/' + filename
location <- '2015-01'
filename <- '/2015-01-northern-ireland-street.csv'
x <- location + filename
x <- paste(location, filename, sep = "/")
x
filename <- '2015-01-northern-ireland-street.csv'
x <- paste(location, filename, sep = "/")
x
my_data = read.csv(x)
head(my_data, 5)
list.files(pattern = "*.csv")
list.files(pattern = "*.csv")
list.files(path=".", pattern = "*.csv")
list.files(path=".",)
Increment <- function(year, month) { }
ReadFiles <- function(year, month) {     print("filename ", year, month) }
year <- 2015
month <- '01'
ReadFiles(year, month)
year <- 2015
month <- '01'
ReadFiles(year, month)
Increment <- function(year, month) { }
ReadFiles <- function(year, month) {     print("filename ", year) }
year <- 2015
month <- '01'
ReadFiles(year, month)
}
ReadFiles <- function(year, month) {     print(paste("filename ", year)) }
year <- 2015
month <- '01'
ReadFiles(year, month)
ReadFiles <- function(year, month) {     print(paste("filename ", year, month)) }
year <- 2015
month <- '01'
ReadFiles(year, month)
}
ReadFiles <- function(year, month) {     print(paste("filename ", year, "-", month)) }
year <- 2015
month <- '01'
ReadFiles(year, month)
}
ReadFiles <- function(year, month) {     print(paste("filename ", year, "-", month, sep="")) }
year <- 2015
month <- '01'
ReadFiles(year, month)
list.files(path=".",)
year <- 2015
month <- '01'
x <- list.files(path = ".",)
x
for (year in x) {     print(paste("The year is", year)) }
#--Read CSV------------------------------------------------------------------------
Increment <- function(year, month) {     if (month == 12) {         year = year + 1         month = '01'     } else {         m <- as.integer(month)         m = m + 1         if (m < 10){             month <- paste("0", m, sep = "")         } else {             month <- paste("", m, sep = "") #convert to string         }      } }
ReadFiles <- function(year, month) {     print(paste("filename ", year, "-", month, sep=""))     #my_data = read.csv(x)     Increment(year, month) }
year <- 2015
month <- '01'
x <- list.files(path = ".",)
x
for (year in x) {     ReadFiles(year, month) }
Increment <- function(year, month) {     paste("received ", year, month)     if (month == 12) {         year = year + 1         month = '01'     } else {         m <- as.integer(month)         m = m + 1         if (m < 10){             month <- paste("0", m, sep = "")         } else {             month <- paste("", m, sep = "") #convert to string         }      }     paste("return ", year, month) }
ReadFiles <- function(year, month) {     #print(paste("filename ", year, "-", month, sep=""))     #my_data = read.csv(x)     Increment(year, month) }
year <- 2015
month <- '01'
folders <- list.files(path = ".",)
for (year in folders) {     ReadFiles(year, month) }
location <- '2015-01'
y <- 2015
m <- 01
filename <- '2015-01-northern-ireland-street.csv'
for (x in folders) {     ReadFiles(year, month) }
location <- '2015-01'
folders
for (x in folders) {     ReadFiles(year, month) }
for (x in folders) {     print(x)     ReadFiles(year, month) }
for (x in folders) {     ReadFiles(year, month) }
location <- '2015-01'
y <- 2015
Increment <- function(year, month) {     print(paste("received ", year, month))     if (month == 12) {         year = year + 1         month = '01'     } else {         m <- as.integer(month)         m = m + 1         if (m < 10){             month <- paste("0", m, sep = "")         } else {             month <- paste("", m, sep = "") #convert to string         }      }     print(paste("return ", year, month)) }
ReadFiles <- function(year, month) {     #print(paste("filename ", year, "-", month, sep=""))     #my_data = read.csv(x)     Increment(year, month) }
year <- 2015
month <- '01'
folders <- list.files(path = ".",)
folders
for (x in folders) {     ReadFiles(year, month) }
year <- 2015    #print(paste("filename ", year, "-", month, sep=""))
    #my_data = read.csv(x)
    Increment(year, month)
    return(year, month)
}
year <- 2015
month <- '01'
folders <- list.files(path = ".",)
Increment <- function(year, month) {     print(paste("Increment received ", year, month))     if (month == 12) {         year = year + 1         month = '01'     } else {         m <- as.integer(month)         m = m + 1         if (m < 10){             month <- paste("0", m, sep = "")         } else {             month <- paste("", m, sep = "") #convert to string         }      }     print(paste("Increment returned ", year, month)) }
ReadFiles <- function(year, month) {     #print(paste("filename ", year, "-", month, sep=""))     #my_data = read.csv(x)     print(paste("\nReadFiles received ", year, month))     Increment(year, month)     print(paste("ReadFiles returned ", year, month))     #return(year, month) }
year <- 2015
month <- '01'
folders <- list.files(path = ".",)
folders
for (x in folders) {     ReadFiles(year, month) }
#--Read CSV------------------------------------------------------------------------
Increment <- function(year, month) {     print(paste("Increment received ", year, month))     if (month == 12) {         year = year + 1         month = '01'     } else {         m <- as.integer(month)         m = m + 1         if (m < 10){             month <- paste("0", m, sep = "")         } else {             month <- paste("", m, sep = "") #convert to string         }      }     print(paste("Increment returned ", year, month)) }
ReadFiles <- function(year, month) {     #print(paste("filename ", year, "-", month, sep=""))     #my_data = read.csv(x)     print(paste("\nReadFiles received ", year, month))     year, month <- Increment(year, month)     print(paste("ReadFiles returned ", year, month))     #return(year, month) }
year <- 2015
month <- '01'
folders <- list.files(path = ".",)
folders
for (x in folders) {     year, month <- ReadFiles(year, month) } print(paste("Final ", year, month))
for (x in folders) {     ReadFiles(year, month) }
year <- 2015
month <- '01'
#--Read CSV------------------------------------------------------------------------
Increment <- function(year, month) {     print(paste("Increment received ", year, month))     if (month == 12) {         year = year + 1         month = '01'     } else {         m <- as.integer(month)         m = m + 1         if (m < 10){             month <- paste("0", m, sep = "")         } else {             month <- paste("", m, sep = "") #convert to string         }      }     print(paste("Increment returned ", year, month)) }
ReadFiles <- function(year, month) {     #print(paste("filename ", year, "-", month, sep=""))     #my_data = read.csv(x)     print(paste("\nReadFiles received ", year, month))     Increment(year, month)     print(paste("ReadFiles returned ", year, month))     #return(year, month) }
folders <- list.files(path = ".",)
folders
for (x in folders) {     ReadFiles(year, month) }
folders
for (x in folders) {    year, month <- ReadFiles(year, month) } year <- 2015
month <- '01'
#--Read CSV------------------------------------------------------------------------
Increment <- function(year, month) {     print(paste("Increment received ", year, month))     if (month == 12) {         year = year + 1         month = '01'     } else {         m <- as.integer(month)         m = m + 1         if (m < 10){             month <- paste("0", m, sep = "")         } else {             month <- paste("", m, sep = "") #convert to string         }      }     print(paste("Increment returned ", year, month))     return(year, month) }
ReadFiles <- function(year, month) {     #print(paste("filename ", year, "-", month, sep=""))     #my_data = read.csv(x)     print(paste("\nReadFiles received ", year, month))     year, month <- Increment(year, month)     print(paste("ReadFiles returned ", year, month))     return(year, month) }
folders <- list.files(path = ".",)
folders
year <- 2015
month <- '01'
#--Read CSV------------------------------------------------------------------------
Increment <- function(year, month) {     print(paste("Increment received ", year, month))     if (month == 12) {         year = year + 1         month = '01'     } else {         m <- as.integer(month)         m = m + 1         if (m < 10){             month <- paste("0", m, sep = "")         } else {             month <- paste("", m, sep = "") #convert to string         }      }     print(paste("Increment returned ", year, month))     return(c(year, month)) }
ReadFiles <- function(year, month) {     #print(paste("filename ", year, "-", month, sep=""))     #my_data = read.csv(x)     print(paste("\nReadFiles received ", year, month))     year, month <- Increment(year, month)     print(paste("ReadFiles returned ", year, month))     return(c(year, month)) }
folders <- list.files(path = ".",)
    print(paste("\nReadFiles received ", year, month))
    year, month <- Increment(year, month)
    print(paste("ReadFiles returned ", year, month))
    return(c(year, month))
}
year <- 2015
month <- '01'
#--Read CSV------------------------------------------------------------------------
Increment <- function(year, month) {     print(paste("Increment received ", year, month))     if (month == 12) {         year = year + 1         month = '01'     } else {         m <- as.integer(month)         m = m + 1         if (m < 10){             month <- paste("0", m, sep = "")         } else {             month <- paste("", m, sep = "") #convert to string         }      }     print(paste("Increment returned ", year, month))     return(c(year, month)) }
ReadFiles <- function(year, month) {     #print(paste("filename ", year, "-", month, sep=""))     #my_data = read.csv(x)     print(paste("ReadFiles received ", year, month))     year, month <- Increment(year, month)     print(paste("ReadFiles returned ", year, month))     return(c(year, month)) }
folders <- list.files(path = ".",)
folders
for (x in folders) {    year, month <- ReadFiles(year, month) } print(paste("Final ", year, month))
year <- 2015
month <- '01'
yearmonth <- c(2015, '01')
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     print(paste("Increment received ", yearmonth[0], yearmonth[1]))     if (yearmonth[1] == 12) {         yearmonth[0] = yearmonth[1] + 1         yearmonth[1] = '01'     } else {         m <- as.integer(yearmonth[1])         m = m + 1         if (m < 10){             yearmonth[1] <- paste("0", m, sep = "")         } else {             yearmonth[1] <- paste("", m, sep = "") #convert to string         }      }     print(paste("Increment returned ", yearmonth[0], yearmonth[1]))     return(yearmonth) }
ReadFiles <- function(yearmonth) {     #print(paste("filename ", year, "-", month, sep=""))     #my_data = read.csv(x)     print(paste("ReadFiles received ", yearmonth[0], yearmonth[1]))     yearmonth <- Increment(year, month)     print(paste("ReadFiles returned ", yearmonth[0], yearmonth[1]))     #print(paste("ReadFiles returned ", year[0], month))     return(yearmonth) }
folders <- list.files(path = ".",)
folders
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
year <- 2015
month <- '01'
yearmonth <- c(2015, '01')
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     print(paste("Increment received ", yearmonth[0], yearmonth[1]))     if (yearmonth[1] == 12) {         yearmonth[0] = yearmonth[1] + 1         yearmonth[1] = '01'     } else {         m <- as.integer(yearmonth[1])         m = m + 1         if (m < 10){             yearmonth[1] <- paste("0", m, sep = "")         } else {             yearmonth[1] <- paste("", m, sep = "") #convert to string         }      }     print(paste("Increment returned ", yearmonth[0], yearmonth[1]))     return(yearmonth) }
ReadFiles <- function(yearmonth) {     #print(paste("filename ", year, "-", month, sep=""))     #my_data = read.csv(x)     print(paste("ReadFiles received ", yearmonth[0], yearmonth[1]))     yearmonth <- Increment(yearmonth)     print(paste("ReadFiles returned ", yearmonth[0], yearmonth[1]))     #print(paste("ReadFiles returned ", year[0], month))     return(yearmonth) }
folders <- list.files(path = ".",)
folders
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
print(paste("Final ", yearmonth))
yearmonth
yearmonth <- c(2015, '01')
yearmonth
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     print(paste("Increment received ", yearmonth))     if (yearmonth[1] == 12) {         yearmonth[0] = yearmonth[1] + 1         yearmonth[1] = '01'     } else {         m <- as.integer(yearmonth[1])         m = m + 1         if (m < 10){             yearmonth[1] <- paste("0", m, sep = "")         } else {             yearmonth[1] <- paste("", m, sep = "") #convert to string         }      }     print(paste("Increment returned ", yearmonth))     return(yearmonth) }
ReadFiles <- function(yearmonth) {     #print(paste("filename ", year, "-", month, sep=""))     #my_data = read.csv(x)     print(paste("ReadFiles received ",yearmonth))     yearmonth <- Increment(yearmonth)     print(paste("ReadFiles returned ",yearmonth))     #print(paste("ReadFiles returned ", year[0], month))     return(yearmonth) }
folders <- list.files(path = ".",)
folders
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
Increment <- function(yearmonth) {     print(paste("Increment received ", yearmonth[0],yearmonth[1],yearmonth[3]))     if (yearmonth[1] == 12) {         yearmonth[0] = yearmonth[1] + 1         yearmonth[1] = '01'     } else {         m <- as.integer(yearmonth[1])         m = m + 1         if (m < 10){             yearmonth[1] <- paste("0", m, sep = "")         } else {             yearmonth[1] <- paste("", m, sep = "") #convert to string         }      }     print(paste("Increment returned ", yearmonth))     return(yearmonth) }
ReadFiles <- function(yearmonth) {     #print(paste("filename ", year, "-", month, sep=""))     #my_data = read.csv(x)     print(paste("ReadFiles received ",yearmonth))     yearmonth <- Increment(yearmonth)     print(paste("ReadFiles returned ",yearmonth))     #print(paste("ReadFiles returned ", year[0], month))     return(yearmonth) }
folders <- list.files(path = ".",)
folders
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
print(paste("Final ", yearmonth))
location <- '2015-01'
    print(paste("Increment received ", yearmonth[1],yearmonth[2]))
    if (yearmonth[1] == 12) {         yearmonth[0] = yearmonth[1] + 1         yearmonth[1] = '01'     } else {         m <- as.integer(yearmonth[1])         m = m + 1         if (m < 10){             yearmonth[1] <- paste("0", m, sep = "")         } else {             yearmonth[1] <- paste("", m, sep = "") #convert to string         }      }
    print(paste("Increment returned ", yearmonth))
    return(yearmonth)
}
ReadFiles <- function(yearmonth) {     #print(paste("filename ", year, "-", month, sep=""))     #my_data = read.csv(x)     print(paste("ReadFiles received ",yearmonth))     yearmonth <- Increment(yearmonth)     print(paste("ReadFiles returned ",yearmonth))     #print(paste("ReadFiles returned ", year[0], month))     return(yearmonth) }
folders <- list.files(path = ".",)
folders
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
print(paste("Final ", yearmonth))
year <- 2015
month <- '01'
yearmonth <- c(2015, '01')
yearmonth
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     print(paste("Increment received ", yearmonth[1], yearmonth[2]))     yearmonth     if (yearmonth[1] == 12) {         yearmonth[0] = yearmonth[1] + 1         yearmonth[1] = '01'     } else {         m <- as.integer(yearmonth[1])         m = m + 1         if (m < 10){             yearmonth[1] <- paste("0", m, sep = "")         } else {             yearmonth[1] <- paste("", m, sep = "") #convert to string         }      }     print(paste("Increment returned ", yearmonth))     return(yearmonth) }
ReadFiles <- function(yearmonth) {     #print(paste("filename ", year, "-", month, sep=""))     #my_data = read.csv(x)     print(paste("ReadFiles received ",yearmonth))     yearmonth <- Increment(yearmonth)     print(paste("ReadFiles returned ",yearmonth))     #print(paste("ReadFiles returned ", year[0], month))     return(yearmonth) }
folders <- list.files(path = ".",)
folders
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
print(paste("Final ", yearmonth))
year <- 2015
month <- '01'
yearmonth <- c(2015, '01')
yearmonth
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     print(paste("Increment received ", yearmonth[1], yearmonth[2]))     if (yearmonth[2] == 12) {         yearmonth[1] = yearmonth[1] + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste("0", m, sep = "")         } else {             yearmonth[2] <- paste("", m, sep = "") #convert to string         }      }     print(paste("Increment returned ", yearmonth))     return(yearmonth) }
ReadFiles <- function(yearmonth) {     #print(paste("filename ", year, "-", month, sep=""))     #my_data = read.csv(x)     print(paste("ReadFiles received ",yearmonth))     yearmonth <- Increment(yearmonth)     print(paste("ReadFiles returned ",yearmonth))     #print(paste("ReadFiles returned ", year[0], month))     return(yearmonth) }
folders <- list.files(path = ".",)
folders
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
print(paste("Final ", yearmonth))
location <- '2015-01'
y <- 2015
m <- 01
year <- 2015
month <- '01'
yearmonth <- c(2015, '01')
yearmonth
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (yearmonth[2] == '12') {         yearmonth[1] = yearmonth[1] + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         } else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     print(paste('Increment returned ', yearmonth))     return(yearmonth) }
ReadFiles <- function(yearmonth) {     #print(paste('filename ', year, '-', month, sep=''))     #my_data = read.csv(x)     print(paste('ReadFiles received ',yearmonth))     yearmonth <- Increment(yearmonth)     print(paste('ReadFiles returned ',yearmonth))     #print(paste('ReadFiles returned ', year[0], month))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
print(paste('Final ', yearmonth))
year <- 2015
month <- '01'
yearmonth <- c(2015, '01')
yearmonth
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (yearmonth[2] = '12') {         yearmonth[1] = yearmonth[1] + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         } else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     print(paste('Increment returned ', yearmonth))     return(yearmonth) }
year <- 2015
month <- '01'
yearmonth <- c(2015, '01')
yearmonth
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = yearmonth[1] + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         } else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     print(paste('Increment returned ', yearmonth))     return(yearmonth) }
ReadFiles <- function(yearmonth) {     #print(paste('filename ', year, '-', month, sep=''))     #my_data = read.csv(x)     print(paste('ReadFiles received ',yearmonth))     yearmonth <- Increment(yearmonth)     print(paste('ReadFiles returned ',yearmonth))     #print(paste('ReadFiles returned ', year[0], month))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
year <- 2015
month <- '01'
yearmonth <- c(2015, '01')
yearmonth
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         } else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     print(paste('Increment returned ', yearmonth))     return(yearmonth) }
ReadFiles <- function(yearmonth) {     #print(paste('filename ', year, '-', month, sep=''))     #my_data = read.csv(x)     print(paste('ReadFiles received ',yearmonth))     yearmonth <- Increment(yearmonth)     print(paste('ReadFiles returned ',yearmonth))     #print(paste('ReadFiles returned ', year[0], month))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
print(paste('Final ', yearmonth))
len(folders)
length(folders)
year <- 2015
month <- '01'
yearmonth <- c(2015, '01')
yearmonth
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         } else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
ReadFiles <- function(yearmonth) {     print(paste('Read ', yearmonth, sep=''))     #my_data = read.csv(x)     #print(paste('ReadFiles received ',yearmonth))     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
print(paste('Final ', yearmonth))
location <- '2015-01'
y <- 2015
}
ReadFiles <- function(yearmonth) {     print(paste('Read ', yearmonth[1], yearmonth[2], sep=''))     #my_data = read.csv(x)     #print(paste('ReadFiles received ',yearmonth))     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
location <- '2015-01'
folders <- list.files(path = '.',)
yearmonth <- c(2015, '01')
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
ReadFiles <- function(yearmonth) {     fullpath <- print(paste(yearmonth[1], '-', yearmonth[2], 'norther-ireland-street.csv', sep = ''))     print(paste('Read ', fullpath))     #my_data = read.csv(x)     #print(paste('ReadFiles received ',yearmonth))     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
yearmonth <- c(2015, '01')
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         } else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
ReadFiles <- function(yearmonth) {     fullpath <- paste(yearmonth[1], '-', yearmonth[2], '/norther-ireland-street.csv', sep = '')     print(paste('Read ', fullpath))     my_data = read.csv(fullpath)     #print(paste('ReadFiles received ',yearmonth))     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
yearmonth <- c(2015, '01')
yearmonth <- ReadFiles(yearmonth)
folders <- list.files(path = '.',)
folders
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
}
}
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         } else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
ReadFiles <- function(yearmonth) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     fullpath <- paste(locatiion, '/', location, '-norther-ireland-street.csv', sep = '')     print(paste('Read ', fullpath))     my_data = read.csv(fullpath)     #print(paste('ReadFiles received ',yearmonth))     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
yearmonth <- ReadFiles(yearmonth)
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         } else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
ReadFiles <- function(yearmonth) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     fullpath <- paste(location, '/', location, '-norther-ireland-street.csv', sep = '')     print(paste('Read ', fullpath))     my_data = read.csv(fullpath)     #print(paste('ReadFiles received ',yearmonth))     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
yearmonth <- ReadFiles(yearmonth)
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         } else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
ReadFiles <- function(yearmonth) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-norther-ireland-street.csv', sep = '')     fullpath     my_data = read.csv(fullpath)     #print(paste('ReadFiles received ',yearmonth))     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
yearmonth <- ReadFiles(yearmonth)
my_data <- read.csv('2015 - 01 - northern - ireland - street.csv')
my_data <- read.csv('2015-01-northern-ireland-street.csv')
my_data <- read.csv('2015-01/2015-01-northern-ireland-street.csv')
head(my_data)
yearmonth <- ReadFiles(yearmonth)
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         } else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
ReadFiles <- function(yearmonth) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-northern-ireland-street.csv', sep = '')     fullpath     my_data = read.csv(fullpath)     #print(paste('ReadFiles received ',yearmonth))     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
#my_data <- read.csv('2015-01/2015-01-northern-ireland-street.csv')
#head(my_data)
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
yearmonth <- ReadFiles(yearmonth)
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
location <- '2015-01'
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         } else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
ReadFiles <- function(yearmonth) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-northern-ireland-street.csv', sep = '')     fullpath     print(paste('Reading ', fullpath))     my_data = read.csv(fullpath)     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
#my_data <- read.csv('2015-01/2015-01-northern-ireland-street.csv')
#head(my_data)
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
#yearmonth <- ReadFiles(yearmonth)
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
location <- '2015-01'
head(my_data)
length(my_data)
>  #--Read CSV------------------------------------------------------------------------ Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         } else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
ReadFiles <- function(yearmonth) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-northern-ireland-street.csv', sep = '')     fullpath     print(paste('Reading ', fullpath))     my_data = read.csv(fullpath)     length(my_data)     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
#my_data <- read.csv('2015-01/2015-01-northern-ireland-street.csv')
#head(my_data)
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
#yearmonth <- ReadFiles(yearmonth)
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
head(my_data)
length(my_data)
nrow(my_data)
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         } else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
ReadFiles <- function(yearmonth) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-northern-ireland-street.csv', sep = '')     fullpath     print(paste('Reading ', fullpath))     my_data = read.csv(fullpath)     print(paste('total rows ', nrow(my_data)))     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
#my_data <- read.csv('2015-01/2015-01-northern-ireland-street.csv')
#head(my_data)
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
#yearmonth <- ReadFiles(yearmonth)
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
head(my_data)
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         } else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
ReadFiles <- function(yearmonth) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-northern-ireland-street.csv', sep = '')     fullpath     print(paste('Reading ', fullpath))     my_data = rbind(read.csv(fullpath))     print(paste('total rows ', nrow(my_data)))     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
#my_data <- read.csv('2015-01/2015-01-northern-ireland-street.csv')
#head(my_data)
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
#yearmonth <- ReadFiles(yearmonth)
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
head(my_data)
nrow(my_data)
location <- '2015-01'
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         } else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
ReadFiles <- function(yearmonth) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-northern-ireland-street.csv', sep = '')     fullpath     print(paste('Reading ', fullpath))     my_data <- rbind(read.csv(fullpath))     print(paste('total rows ', nrow(my_data)))     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         } else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
ReadFiles <- function(yearmonth) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-northern-ireland-street.csv', sep = '')     fullpath     print(paste('Reading ', fullpath))     my_data <- rbind(my_data, read.csv(fullpath))     print(paste('total rows ', nrow(my_data)))     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         } else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
ReadFiles <- function(yearmonth) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-northern-ireland-street.csv', sep = '')     fullpath     print(paste('Reading ', fullpath))     my_data_in <- read.csv(fullpath))     my_data <- rbind(my_data, my_data_in)     print(paste('total rows ', nrow(my_data)))     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         } else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
ReadFiles <- function(yearmonth) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-northern-ireland-street.csv', sep = '')     fullpath     print(paste('Reading ', fullpath))     my_data_in <- read.csv(fullpath))     my_data <- rbind(my_data, my_data_in)     print(paste('total rows ', nrow(my_data)))     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
    my_data_in <- read.csv(fullpath))
    my_data <- rbind(my_data, my_data_in)
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         } else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
ReadFiles <- function(yearmonth) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-northern-ireland-street.csv', sep = '')     fullpath     print(paste('Reading ', fullpath))     my_data_in <- read.csv(fullpath)     my_data <- rbind(my_data, my_data_in)     print(paste('total rows ', nrow(my_data)))     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         } else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
ReadFiles <- function(yearmonth) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-northern-ireland-street.csv', sep = '')     fullpath     print(paste('Reading ', fullpath))     my_data_in <- read.csv(fullpath)     print(paste('new rows      ', nrow(my_data_in)))     print(paste('existing rows ', nrow(my_data)))     my_data <- rbind(my_data, my_data_in)     print(paste('total rows    ', nrow(my_data)))     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         } else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
i <- 0
ReadFiles <- function(yearmonth) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-northern-ireland-street.csv', sep = '')     fullpath     print(paste('Reading ', fullpath))     my_data_in[i] <- read.csv(fullpath)     print(paste('new rows ', nrow(my_data_in[i]), '[', i, ']'))     my_data <- rbind(my_data, my_data_in[i])     print(paste('total rows    ', nrow(my_data)))     i = i + 1     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         } else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
i <- 0
ReadFiles <- function(yearmonth) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-northern-ireland-street.csv', sep = '')     fullpath     print(paste('Reading ', fullpath))     read_in <- read.csv(fullpath)     my_data_in[i] <- read_in     print(paste('new rows ', nrow(my_data_in[i]), '[', i, ']'))     my_data <- rbind(my_data, my_data_in[i])     print(paste('total rows    ', nrow(my_data)))     i = i + 1     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         } else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
i <- 0
ReadFiles <- function(yearmonth) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-northern-ireland-street.csv', sep = '')     fullpath     print(paste('Reading ', fullpath))     read_in <- read.csv(fullpath)     head(read_in)     my_data_in[i] <- read_in     print(paste('new rows ', nrow(my_data_in[i]), '[', i, ']'))     my_data <- rbind(my_data, my_data_in[i])     print(paste('total rows    ', nrow(my_data)))     i = i + 1     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         } else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
i <- 0
ReadFiles <- function(yearmonth) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-northern-ireland-street.csv', sep = '')     fullpath     print(paste('Reading ', fullpath))     read_in <- read.csv(fullpath)     print(paste('Reading ssds', fullpath))     my_data_in[i] <- read_in     print(paste('new rows ', nrow(my_data_in[i]), '[', i, ']'))     my_data <- rbind(my_data, my_data_in[i])     print(paste('total rows    ', nrow(my_data)))     i = i + 1     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         } else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
i <- 0
ReadFiles <- function(yearmonth) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-northern-ireland-street.csv', sep = '')     fullpath     print(paste('Reading ', fullpath))     if (i == 0)         my_data <- read.csv(fullpath)     else         my_data_new <- read.csv(fullpath)         my_data <- rbind(my_data, my_data_new)     print(paste('new rows      ', nrow(my_data_new)))     print(paste('total rows    ', nrow(my_data)))     #print(paste('existing rows ', nrow(my_data)))     print(paste('total rows    ', nrow(my_data)))     i = i + 1     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
head(my_data)
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         } else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
i <- 0
ReadFiles <- function(yearmonth) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-northern-ireland-street.csv', sep = '')     fullpath     print(paste('Reading ', fullpath))     if (i == 0)         my_data <- read.csv(fullpath)     else         my_data_new <- read.csv(fullpath)         print(paste('new rows      ', nrow(my_data_new)))         my_data <- rbind(my_data, my_data_new)     print(paste('new rows      ', nrow(my_data_new)))     print(paste('total rows    ', nrow(my_data)))     #print(paste('existing rows ', nrow(my_data)))     print(paste('total rows    ', nrow(my_data)))     i = i + 1     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         } else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
i <- 0
ReadFiles <- function(yearmonth) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-northern-ireland-street.csv', sep = '')     fullpath     print(paste('Reading ', fullpath))     if (i == 0)         my_data <- read.csv(fullpath)     else         my_data_new <- read.csv(fullpath)         print(paste('new rows      ', nrow(my_data_new)))         my_data <- rbind(my_data, my_data_new)     #print(paste('new rows      ', nrow(my_data_new)))     print(paste('total rows    ', nrow(my_data)))     #print(paste('existing rows ', nrow(my_data)))     print(paste('total rows    ', nrow(my_data)))     i = i + 1     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         }          else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
i <- 0
ReadFiles <- function(yearmonth) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-northern-ireland-street.csv', sep = '')     fullpath     print(paste('Reading ', fullpath))     if (i == 0) {         my_data <- read.csv(fullpath)     }      else {         my_data_new <- read.csv(fullpath)         print(paste('new rows      ', nrow(my_data_new)))         my_data <- rbind(my_data, my_data_new)     }     #print(paste('new rows      ', nrow(my_data_new)))     print(paste('total rows    ', nrow(my_data)))     #print(paste('existing rows ', nrow(my_data)))     print(paste('total rows    ', nrow(my_data)))     i = i + 1     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
head(my_data)
nrow(my_data)
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         }          else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
i <- 0
ReadFiles <- function(yearmonth) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-northern-ireland-street.csv', sep = '')     fullpath     print(paste('Reading ', fullpath, 'i = ', i))     if (i == 0) {         my_data <- read.csv(fullpath)     }      else {         my_data_new <- read.csv(fullpath)         print(paste('new rows      ', nrow(my_data_new)))         my_data <- rbind(my_data, my_data_new)     }     #print(paste('new rows      ', nrow(my_data_new)))     print(paste('total rows    ', nrow(my_data)))     #print(paste('existing rows ', nrow(my_data)))     print(paste('total rows    ', nrow(my_data)))     i = i + 1     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
head(my_data)
nrow(my_data)
location <- '2015-01'
y <- 2015
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         }          else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
i <- 0
ReadFiles <- function(yearmonth) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-northern-ireland-street.csv', sep = '')     fullpath     print(paste('Reading ', fullpath, 'i = ', i))     if (i == 0) {         my_data <- read.csv(fullpath)     }      else {         my_data_new <- read.csv(fullpath)         print(paste('new rows      ', nrow(my_data_new)))         my_data <- rbind(my_data, my_data_new)     }     #print(paste('new rows      ', nrow(my_data_new)))     print(paste('total rows    ', nrow(my_data)))     #print(paste('existing rows ', nrow(my_data)))     print(paste('total rows    ', nrow(my_data)))     i = i + 1     print(paste('i = i + 1 ', i))     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
head(my_data)
nrow(my_data)
location <- '2015-01'
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         }          else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
print('define i')
i <- 0
ReadFiles <- function(yearmonth) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-northern-ireland-street.csv', sep = '')     fullpath     print(paste('Reading ', fullpath, 'i = ', i))     if (i == 0) {         my_data <- read.csv(fullpath)     }      else {         my_data_new <- read.csv(fullpath)         print(paste('new rows      ', nrow(my_data_new)))         my_data <- rbind(my_data, my_data_new)     }     #print(paste('new rows      ', nrow(my_data_new)))     print(paste('total rows    ', nrow(my_data)))     #print(paste('existing rows ', nrow(my_data)))     print(paste('total rows    ', nrow(my_data)))     i = i + 1     print(paste('i = i + 1 ', i))     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
for (x in folders) {    yearmonth <- ReadFiles(yearmonth) }
j <-0
testf <- function() {     j = j + 1     print(j) }
testf
testf
j <-0
testf <- function() {     j = j + 1     print(j) }
testf()
testf()
j <-0
testf <- function() {     j = j + 1     print(j) }
print(paste('a ', j))
testf()
print(paste('b ', j))
testf()
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         }          else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
print('define i')
i <- 0
ReadFiles <- function(yearmonthm, x) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-northern-ireland-street.csv', sep = '')     fullpath     print(paste('Reading ', fullpath, 'x = ', x))     if (i == 0) {         my_data <- read.csv(fullpath)     }      else {         my_data_new <- read.csv(fullpath)         print(paste('new rows      ', nrow(my_data_new)))         my_data <- rbind(my_data, my_data_new)     }     #print(paste('new rows      ', nrow(my_data_new)))     print(paste('total rows    ', nrow(my_data)))     #print(paste('existing rows ', nrow(my_data)))     print(paste('total rows    ', nrow(my_data)))     i = i + 1     print(paste('i = i + 1 ', i))     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
j <-0
testf <- function() {     j = j + 1     print(j) }
print(paste('a ', j))
testf()
print(paste('b ', j))
testf()
print(paste('c ', j))
folders <- list.files(path = '.',)
folders
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
for (x in folders) {    yearmonth <- ReadFiles(yearmonth, x) }
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         }          else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
ReadFiles <- function(yearmonthm, x) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-northern-ireland-street.csv', sep = '')     fullpath     print(paste('Reading ', fullpath, 'i = ', i))     if (i == 0) {         my_data <- read.csv(fullpath)     }      else {         my_data_new <- read.csv(fullpath)         print(paste('new rows      ', nrow(my_data_new)))         my_data <- rbind(my_data, my_data_new)     }     #print(paste('new rows      ', nrow(my_data_new)))     print(paste('total rows    ', nrow(my_data)))     #print(paste('existing rows ', nrow(my_data)))     print(paste('total rows    ', nrow(my_data)))     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
i <- 0
for (x in folders) {     yearmonth <- ReadFiles(yearmonth, i)     i = i + 1 }
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         }          else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
ReadFiles <- function(yearmonthm, x) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-northern-ireland-street.csv', sep = '')     fullpath     print(paste('Reading ', fullpath, 'i = ', i))     if (i == 0) {         my_data <- read.csv(fullpath)     }      else {         my_data_new <- read.csv(fullpath)         my_data_save <- my_data         print(paste('new rows      ', nrow(my_data_new)))         my_data <- rbind(my_data_save, my_data_new)     }     #print(paste('new rows      ', nrow(my_data_new)))     print(paste('total rows    ', nrow(my_data)))     #print(paste('existing rows ', nrow(my_data)))     print(paste('total rows    ', nrow(my_data)))     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
i <- 0
for (x in folders) {     yearmonth <- ReadFiles(yearmonth, i)     i = i + 1 }
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         }          else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
ReadFiles <- function(yearmonthm, x) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-northern-ireland-street.csv', sep = '')     fullpath     print(paste('Reading ', fullpath, 'i = ', i, length(my_data), length(my_data_save), length(my_data_new))     if (i == 0) {         my_data <- read.csv(fullpath)     }      else {         my_data_new <- read.csv(fullpath)         my_data_save <- my_data         print(paste('new rows      ', nrow(my_data_new)))         my_data <- rbind(my_data_save, my_data_new)     }     #print(paste('new rows      ', nrow(my_data_new)))     print(paste('total rows    ', nrow(my_data)))     #print(paste('existing rows ', nrow(my_data)))     print(paste('total rows    ', nrow(my_data)))     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
i <- 0
for (x in folders) {     yearmonth <- ReadFiles(yearmonth, i)     i = i + 1 }
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         }          else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
ReadFiles <- function(yearmonthm, x) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-northern-ireland-street.csv', sep = '')     fullpath     print(paste('Reading ', fullpath, 'i = ', i, length(my_data), length(my_data_save), length(my_data_new)))     if (i == 0) {         my_data <- read.csv(fullpath)     }      else {         my_data_new <- read.csv(fullpath)         my_data_save <- my_data         print(paste('new rows      ', nrow(my_data_new)))         my_data <- rbind(my_data_save, my_data_new)     }     #print(paste('new rows      ', nrow(my_data_new)))     print(paste('total rows    ', nrow(my_data)))     #print(paste('existing rows ', nrow(my_data)))     print(paste('total rows    ', nrow(my_data)))     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
i <- 0
for (x in folders) {     yearmonth <- ReadFiles(yearmonth, i)     i = i + 1 }
head(my_data)
nrow(my_data)
location <- '2015-01'
y <- 2015
m <- 01
filename <- '2015-01-northern-ireland-street.csv'
x <- paste(location, filename, sep = '/')
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         }          else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
ReadFiles <- function(yearmonthm, x) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-northern-ireland-street.csv', sep = '')     fullpath     print(paste('Reading ', fullpath, 'i = ', i, length(my_data), length(my_data_save), length(my_data_new)))     if (i == 0) {         my_data <- read.csv(fullpath)     }      else {         my_data_new <- read.csv(fullpath)         my_data_save <- my_data         print(paste('new rows      ', nrow(my_data_new)))         my_data <- rbind(my_data_save, my_data_new)     }     print(paste(length(my_data), length(my_data_save), length(my_data_new)))     #print(paste('new rows      ', nrow(my_data_new)))     #print(paste('total rows    ', nrow(my_data)))     #print(paste('existing rows ', nrow(my_data)))     #print(paste('total rows    ', nrow(my_data)))     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
i <- 0
for (x in folders) {     yearmonth <- ReadFiles(yearmonth, i)     i = i + 1 }
head(my_data)
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         }          else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
ReadFiles <- function(yearmonthm, x) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-northern-ireland-street.csv', sep = '')     fullpath     print(paste('Reading ', fullpath, 'i = ', i, length(my_data), length(my_data_save), length(my_data_new)))     if (i == 0) {         my_data <- read.csv(fullpath)         print(paste('if   ', length(my_data), length(my_data_save), length(my_data_new)))     }      else {         my_data_new <- read.csv(fullpath)         my_data_save <- my_data         print(paste('new rows      ', nrow(my_data_new)))         my_data <- rbind(my_data_save, my_data_new)         print(paste('else ', length(my_data), length(my_data_save), length(my_data_new)))     }     #print(paste('new rows      ', nrow(my_data_new)))     #print(paste('total rows    ', nrow(my_data)))     #print(paste('existing rows ', nrow(my_data)))     #print(paste('total rows    ', nrow(my_data)))     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
i <- 0
for (x in folders) {     +  +  +      yearmonth <- ReadFiles(yearmonth, i)     i = i + 1 }
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         }          else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
ReadFiles <- function(yearmonthm, x) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-northern-ireland-street.csv', sep = '')     fullpath     print(paste('Reading ', fullpath, 'i = ', i, length(my_data), length(my_data_save), length(my_data_new)))     if (i == 0) {         my_data <- read.csv(fullpath)         print(paste('if   ', length(my_data)))     }      else {         my_data_new <- read.csv(fullpath)         my_data_save <- my_data         print(paste('new rows      ', nrow(my_data_new)))         my_data <- rbind(my_data_save, my_data_new)         print(paste('else ', length(my_data), length(my_data_save), length(my_data_new)))     }     #print(paste('new rows      ', nrow(my_data_new)))     #print(paste('total rows    ', nrow(my_data)))     #print(paste('existing rows ', nrow(my_data)))     #print(paste('total rows    ', nrow(my_data)))     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
i <- 0
for (x in folders) {     yearmonth <- ReadFiles(yearmonth, i)     i = i + 1 }
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         }          else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
ReadFiles <- function(yearmonthm, x) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-northern-ireland-street.csv', sep = '')     fullpath     print(paste('Reading ', fullpath, 'i = ', i))     if (i == 0) {         my_data <- read.csv(fullpath)         print(paste('if   ', length(my_data)))     }      else {         my_data_new <- read.csv(fullpath)         my_data_save <- my_data         print(paste('new rows      ', nrow(my_data_new)))         my_data <- rbind(my_data_save, my_data_new)         print(paste('else ', length(my_data), length(my_data_save), length(my_data_new)))     }     #print(paste('new rows      ', nrow(my_data_new)))     #print(paste('total rows    ', nrow(my_data)))     #print(paste('existing rows ', nrow(my_data)))     #print(paste('total rows    ', nrow(my_data)))     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
i <- 0
for (x in folders) {     yearmonth <- ReadFiles(yearmonth, i)     i = i + 1 }
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         }          else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
ReadFiles <- function(yearmonthm, x) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-northern-ireland-street.csv', sep = '')     fullpath     print(paste('Reading ', fullpath, 'i = ', i))     if (i == 0) {         my_data <- read.csv(fullpath)         print(paste('if   ', nrow(my_data)))     }      else {         my_data_new <- read.csv(fullpath)         my_data_save <- my_data         print(paste('new rows      ', nrow(my_data_new)))         my_data <- rbind(my_data_save, my_data_new)         print(paste('else ', nrow(my_data), nrow(my_data_save), nrow(my_data_new)))     }     #print(paste('new rows      ', nrow(my_data_new)))     #print(paste('total rows    ', nrow(my_data)))     #print(paste('existing rows ', nrow(my_data)))     #print(paste('total rows    ', nrow(my_data)))     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
i <- 0
for (x in folders) {     yearmonth <- ReadFiles(yearmonth, i)     i = i + 1 }
#--Read CSV------------------------------------------------------------------------
Increment <- function(yearmonth) {     #print(paste('Increment received ', yearmonth[1], yearmonth[2]))     if (as.integer(yearmonth[2]) == 12) {         yearmonth[1] = as.integer(yearmonth[1]) + 1         yearmonth[2] = '01'     } else {         m <- as.integer(yearmonth[2])         m = m + 1         if (m < 10){             yearmonth[2] <- paste('0', m, sep = '')         }          else {             yearmonth[2] <- paste('', m, sep = '') #convert to string         }      }     #print(paste('Increment returned ', yearmonth))     return(yearmonth) }
ReadFiles <- function(yearmonthm, x) {     location <- paste(yearmonth[1], yearmonth[2], sep = '-')     location     fullpath <- paste(location, '/', location, '-northern-ireland-street.csv', sep = '')     fullpath     print(paste('Reading ', fullpath, 'i = ', i))     if (i == 0) {         my_data <- read.csv(fullpath)         print(paste('if   ', nrow(my_data)))     }      else {         my_data_new <- read.csv(fullpath)         my_data_save <- my_data         print(paste('new rows      ', nrow(my_data_new)))         print(paste('save rows     ', nrow(my_data_save)))         print(paste('data rows      ', nrow(my_data)))         my_data <- rbind(my_data_save, my_data_new)         print(paste('else ', nrow(my_data), nrow(my_data_save), nrow(my_data_new)))     }     #print(paste('new rows      ', nrow(my_data_new)))     #print(paste('total rows    ', nrow(my_data)))     #print(paste('existing rows ', nrow(my_data)))     #print(paste('total rows    ', nrow(my_data)))     yearmonth <- Increment(yearmonth)     #print(paste('ReadFiles returned ',yearmonth))     return(yearmonth) }
folders <- list.files(path = '.',)
folders
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
i <- 0
for (x in folders) {     yearmonth <- ReadFiles(yearmonth, i)     i = i + 1 }
ReadFiles2 <- function(folder, i) {     fullpath <- paste(folder, '/', folder, '-northern-ireland-street.csv', sep = '')     fullpath     print(paste('Reading ', fullpath, 'i = ', i))     new_data <- read.csv(fullpath)     return(new_data) }
folders <- list.files(path = '.',)
folders
list.files(path = '2015-01')
yearmonth <- c(2015, '01')
i <- 0
for (x in folders) {     #yearmonth <- ReadFiles(yearmonth, i)     crime = rbind(crime, ReadFiles2(x,i))     i = i + 1 }
i <- 0
for (x in folders) {     #yearmonth <- ReadFiles(yearmonth, i)     #new_data <- ReadFiles2(x, i)     crime <- rbind(crime, ReadFiles2(x, i))     i = i + 1 }
i <- 0
for (x in folders) {     #yearmonth <- ReadFiles(yearmonth, i)     new_data <- ReadFiles2(x, i)     if (i == 0){         crime <- new_data     }     else {         crime <- rbind(crime, new_data))     }     #crime <- rbind(crime, ReadFiles2(x, i))     i = i + 1 }
i <- 0
for (x in folders) {     #yearmonth <- ReadFiles(yearmonth, i)     new_data <- ReadFiles2(x, i)     if (i == 0){         crime <- new_data     }     else {         crime <- rbind(crime, new_data)     }     #crime <- rbind(crime, ReadFiles2(x, i))     i = i + 1 }
nrow(crime)
ReadFiles <- function(folder) {     fullpath <- paste(folder, '/', folder, '-northern-ireland-street.csv', sep = '')     new_data <- read.csv(fullpath)     return(new_data) }
folders <- list.files(path = '.',)
i <- 0
for (x in folders) {     new_data <- ReadFiles(x)     if (i == 0){         AllNICrimeData <- new_data     }     else {         AllNICrimeData <- rbind(AllNICrimeData, new_data)     }     i = i + 1 }
print(paste('Total Number of Rows ', nrow(AllNICrimeData)) head(AllNICrimeData)
str(AllNICrimeData)
print(paste('Total Number of Rows ', nrow(AllNICrimeData)))
head(AllNICrimeData)
str(AllNICrimeData)
ReadFiles <- function(folder) {     fullpath <- paste(folder, '/', folder, '-northern-ireland-street.csv', sep = '')     new_data <- read.csv(fullpath)     print(paste(folder, nrow(new_data)))     return(new_data) }
folders <- list.files(path = '.',)
i <- 0
for (x in folders) {     new_data <- ReadFiles(x)     if (i == 0){         AllNICrimeData <- new_data     }     else {         AllNICrimeData <- rbind(AllNICrimeData, new_data)     }     i = i + 1 }
print(paste('Total Number of Rows ', nrow(AllNICrimeData)))
head(AllNICrimeData)
str(AllNICrimeData)
write.csv(AllNICrimeData, file = 'AllNICrimeData.csv', quote = FALSE, na = " ", row.names = FALSE)
folders <- list.files(path = '.',)
folders
length(folders)
nrow(folders)
write.csv(AllNICrimeData, file = 'AllNICrimeData.csv', quote = FALSE, na = " ", row.names = FALSE)
folders <- list.files(path = '.',)
folders
length(folders)
nrow(folders)
for (x in folders) {     new_data <- ReadFiles(x)     if (i == 0){         AllNICrimeData <- new_data     }     else {         AllNICrimeData <- rbind(AllNICrimeData, new_data)     }     i = i + 1 }
folders <- list.files(path = '.',)
folders
length(folders)
nrow(folders)
i <- 0
for (x in folders) {     new_data <- ReadFiles(x)     if (i == 0){         AllNICrimeData <- new_data     }     else {         AllNICrimeData <- rbind(AllNICrimeData, new_data)     }     i = i + 1 }
print(paste('Total Number of Rows ', nrow(AllNICrimeData)))
head(AllNICrimeData)
str(AllNICrimeData)
write.csv(AllNICrimeData, file = '2017-12/AllNICrimeData.csv', quote = FALSE, na = " ", row.names = FALSE)
folders <- list.files(path = '.',)
folders
length(folders)
nrow(folders)
i <- 0
for (x in folders) {     new_data <- ReadFiles(x)     if (i == 0){         AllNICrimeData <- new_data     }     else {         AllNICrimeData <- rbind(AllNICrimeData, new_data)     }     i = i + 1 }
print(paste('Total Number of Rows ', nrow(AllNICrimeData)))
AllNICrimeData.bkup <- AllNICrimeData
#remove the following attributes:CrimeID, Reported by, Falls within, LSOA code, LSOA name, last outcome and context.
drop_cols <- c(1, 3, 4, 8, 9, 11, 12)
AllNICrimeData <- subset(AllNICrimeData, select = -drop_cols)
str(AllNICrimeData,1)
str(AllNICrimeData,1)
str(AllNICrimeData)
str(AllNICrimeData.bkup)
head(AllNICrimeData)
str(AllNICrimeData)
head(AllNICrimeData)
Crime.type <- factor(Crime.type)
attach(AllNICrimeData)
#categorised_type <- factor(Crime.type)
#County <- categorised_county
Crime.type <- factor(Crime.type)
str(AllNICrimeData)
head(AllNICrimeData)
AllNICrimeData.bkupc <- AllNICrimeData
attach(AllNICrimeData)
Location <- substr(Location, start = 11)
Location <- sub('on or near ', '', x, ignore.case = TRUE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
str(AllNICrimeData)
head(AllNICrimeData)
Location <- sub('on or near ', '', Location, ignore.case = TRUE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
str(AllNICrimeData)
head(AllNICrimeData)
attach(AllNICrimeData)
Location <- sub('on or near ', '', Location, ignore.case = TRUE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
str(AllNICrimeData)
head(AllNICrimeData)
Location
ReadFiles <- function(folder) {     fullpath <- paste(folder, '/', folder, '-northern-ireland-street.csv', sep = '')     new_data <- read.csv(fullpath)     print(paste(folder, nrow(new_data)))     return(new_data) }
#a) ###############################################################################################################
folders <- list.files(path = '.',)
i <- 0
for (x in folders) {     new_data <- ReadFiles(x)     if (i == 0){         AllNICrimeData <- new_data     }     else {         AllNICrimeData <- rbind(AllNICrimeData, new_data)     }     i = i + 1 }
print(paste('Total Number of Rows ', nrow(AllNICrimeData)))
head(AllNICrimeData)
str(AllNICrimeData)
write.csv(AllNICrimeData, file = '2017-12/AllNICrimeData.csv', quote = FALSE, na = " ", row.names = FALSE)
#b) Remove a number of attributes##################################################################################
AllNICrimeData.bkupb <- AllNICrimeData
#Remove CrimeID(1), Reported by(3) , Falls within(4), LSOA code(8), LSOA name(9), last outcome(11) and context(12).
drop_cols <- c(1, 3, 4, 8, 9, 11, 12)
AllNICrimeData <- subset(AllNICrimeData, select = -drop_cols)
str(AllNICrimeData)
head(AllNICrimeData)
#(c) Factorise the Crime type attribute. Show the modified structure ##############################################
AllNICrimeData.bkupc <- AllNICrimeData
attach(AllNICrimeData)
Location <- sub('on or near ', '', Location, ignore.case = TRUE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
Location
str(AllNICrimeData)
AllNICrimeData$Location
AllNICrimeData$Location <- sub('on or near ', '', AllNICrimeData$Location, ignore.case = TRUE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
AllNICrimeData$Location
str(AllNICrimeData)
head(AllNICrimeData)
ReadFiles <- function(folder) {     fullpath <- paste(folder, '/', folder, '-northern-ireland-street.csv', sep = '')     new_data <- read.csv(fullpath)     print(paste(folder, nrow(new_data)))     return(new_data) }
#a) ###############################################################################################################
folders <- list.files(path = '.',)
i <- 0
for (x in folders) {     new_data <- ReadFiles(x)     if (i == 0){         AllNICrimeData <- new_data     }     else {         AllNICrimeData <- rbind(AllNICrimeData, new_data)     }     i = i + 1 }
print(paste('Total Number of Rows ', nrow(AllNICrimeData)))
head(AllNICrimeData)
str(AllNICrimeData)
write.csv(AllNICrimeData, file = '2017-12/AllNICrimeData.csv', quote = FALSE, na = " ", row.names = FALSE)
#b) Remove a number of attributes##################################################################################
AllNICrimeData.bkup.b <- AllNICrimeData
#Remove CrimeID(1), Reported by(3) , Falls within(4), LSOA code(8), LSOA name(9), last outcome(11) and context(12).
drop_cols <- c(1, 3, 4, 8, 9, 11, 12)
AllNICrimeData <- subset(AllNICrimeData, select = -drop_cols)
str(AllNICrimeData)
head(AllNICrimeData)
#(c) Factorise the Crime type attribute. Show the modified structure ##############################################
AllNICrimeData.bkup.c <- AllNICrimeData
attach(AllNICrimeData) # not woring for some reason
AllNICrimeData$Location <- sub('on or near ', '', AllNICrimeData$Location, ignore.case = TRUE)
str(AllNICrimeData)
head(AllNICrimeData)
AllNICrimeData$Location <- AllNICrimeData$Location[na.strings = " "]
AllNICrimeData$Location <- AllNICrimeData$Location[na.strings = " "]
str(AllNICrimeData)
head(AllNICrimeData)
AllNICrimeDate <- AllNICrimeData.bkup.c
attach(AllNICrimeData) # not woring for some reason
Location
AllNICrimeData$Location <- sub('on or near ', '', AllNICrimeData$Location, ignore.case = TRUE)
AllNICrimeData[Location == ''] <- NA
str(AllNICrimeData)
head(AllNICrimeData)
head(AllNICrimeData$Location)
AllNICrimeDate <- AllNICrimeData.bkup.c
attach(AllNICrimeData) # not woring for some reason
AllNICrimeData$Location <- sub('on or near ', '', AllNICrimeData$Location, ignore.case = TRUE)
head(AllNICrimeData$Location)
AllNICrimeDate <- AllNICrimeData.bkup.c
head(AllNICrimeData$Location)
AllNICrimeDate <- AllNICrimeData.bkup.b
head(AllNICrimeData)
ReadFiles <- function(folder) {     fullpath <- paste(folder, '/', folder, '-northern-ireland-street.csv', sep = '')     new_data <- read.csv(fullpath)     print(paste(folder, nrow(new_data)))     return(new_data) }
#a) ###############################################################################################################
folders <- list.files(path = '.',)
i <- 0
for (x in folders) {     new_data <- ReadFiles(x)     if (i == 0){         AllNICrimeData <- new_data     }     else {         AllNICrimeData <- rbind(AllNICrimeData, new_data)     }     i = i + 1 }
print(paste('Total Number of Rows ', nrow(AllNICrimeData)))
head(AllNICrimeData)
str(AllNICrimeData)
write.csv(AllNICrimeData, file = '2017-12/AllNICrimeData.csv', quote = FALSE, na = " ", row.names = FALSE)
#b) Remove a number of attributes##################################################################################
AllNICrimeData.bkup.b <- AllNICrimeData
#AllNICrimeDate <- AllNICrimeData.bkup.b
#Remove CrimeID(1), Reported by(3) , Falls within(4), LSOA code(8), LSOA name(9), last outcome(11) and context(12).
drop_cols <- c(1, 3, 4, 8, 9, 11, 12)
AllNICrimeData <- subset(AllNICrimeData, select = -drop_cols)
str(AllNICrimeData)
head(AllNICrimeData)
#(c) Factorise the Crime type attribute. Show the modified structure ##############################################
AllNICrimeData.bkup.c <- AllNICrimeData
#AllNICrimeDate <- AllNICrimeData.bkup.c
attach(AllNICrimeData) # not woring for some reason
AllNICrimeData$Location <- sub('on or near ', '', AllNICrimeData$Location, ignore.case = TRUE)
head(AllNICrimeData$Location)
AllNICrimeData[Location == ''] <- NA
str(AllNICrimeData)
head(AllNICrimeData)
length(AllNICrimeData$Location)
AllNICrimeDate <- AllNICrimeData.bkup.c
head(AllNICrimeData)
head(AllNICrimeData$Location)
AllNICrimeData$Locatio[AllNICrimeData$Locatio == ''] <- NA
str(AllNICrimeData)
head(AllNICrimeData)
AllNICrimeDate <- AllNICrimeData.bkup.c
head(AllNICrimeData)
head(AllNICrimeData.bkup.b)
AllNICrimeDate <- AllNICrimeData.bkup.b
#Remove CrimeID(1), Reported by(3) , Falls within(4), LSOA code(8), LSOA name(9), last outcome(11) and context(12).
drop_cols <- c(1, 3, 4, 8, 9, 11, 12)
AllNICrimeData <- subset(AllNICrimeData, select = -drop_cols)
str(AllNICrimeData)
head(AllNICrimeData)
#(c) Factorise the Crime type attribute. Show the modified structure ##############################################
AllNICrimeData.bkup.c <- AllNICrimeData
AllNICrimeDate <- AllNICrimeData.bkup.c
attach(AllNICrimeData) # not woring for some reason
AllNICrimeData$Location <- sub('on or near ', '', AllNICrimeData$Location, ignore.case = TRUE)
head(AllNICrimeData$Location)
AllNICrimeData$Locatio[AllNICrimeData$Location == ''] <- NA
str(AllNICrimeData)
head(AllNICrimeData)
AllNICrimeDate <- AllNICrimeData.bkup.b
#Remove CrimeID(1), Reported by(3) , Falls within(4), LSOA code(8), LSOA name(9), last outcome(11) and context(12).
drop_cols <- c(1, 3, 4, 8, 9, 11, 12)
AllNICrimeData <- subset(AllNICrimeData, select = -drop_cols)
str(AllNICrimeData)
head(AllNICrimeData)
#(c) Factorise the Crime type attribute. Show the modified structure ##############################################
AllNICrimeData.bkup.c <- AllNICrimeData
AllNICrimeDate <- AllNICrimeData.bkup.c
attach(AllNICrimeData) # not woring for some reason
AllNICrimeData$Location <- sub('on or near ', '', AllNICrimeData$Location, ignore.case = TRUE)
head(AllNICrimeData$Location)
AllNICrimeData$Location[AllNICrimeData$Location == ''] <- NA
str(AllNICrimeData)
head(AllNICrimeData)
ReadFiles <- function(folder) {     fullpath <- paste(folder, '/', folder, '-northern-ireland-street.csv', sep = '')     new_data <- read.csv(fullpath)     print(paste(folder, nrow(new_data)))     return(new_data) }
#a) ###############################################################################################################
folders <- list.files(path = '.',)
i <- 0
for (x in folders) {     new_data <- ReadFiles(x)     if (i == 0){         AllNICrimeData <- new_data     }     else {         AllNICrimeData <- rbind(AllNICrimeData, new_data)     }     i = i + 1 }
print(paste('Total Number of Rows ', nrow(AllNICrimeData)))
head(AllNICrimeData)
str(AllNICrimeData)
write.csv(AllNICrimeData, file = '2017-12/AllNICrimeData.csv', quote = FALSE, na = " ", row.names = FALSE)
#b) Remove a number of attributes##################################################################################
AllNICrimeData.bkup.b <- AllNICrimeData
#AllNICrimeDate <- AllNICrimeData.bkup.b
#Remove CrimeID(1), Reported by(3) , Falls within(4), LSOA code(8), LSOA name(9), last outcome(11) and context(12).
drop_cols <- c(1, 3, 4, 8, 9, 11, 12)
AllNICrimeData <- subset(AllNICrimeData, select = -drop_cols)
str(AllNICrimeData)
head(AllNICrimeData)
#(c) Factorise the Crime type attribute. Show the modified structure ##############################################
AllNICrimeData.bkup.c <- AllNICrimeData
#AllNICrimeDate <- AllNICrimeData.bkup.c
attach(AllNICrimeData) # not woring for some reason
AllNICrimeData$Location <- sub('on or near ', '', AllNICrimeData$Location, ignore.case = TRUE)
head(AllNICrimeData$Location)
AllNICrimeData$Location[AllNICrimeData$Location == ''] <- NA
str(AllNICrimeData)
head(AllNICrimeData)
head(postcodes)
postcodes <- read.csv('2017-12/CheanNIPostcodeData.csv')
head(postcodes)
postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv')
head(postcodes)
head(postcodes)
head(postcodes$Primary_Thorfare)
head(AllNICrimeData)
for (x in 10) {     print(x)     AllNICrimeData$Location[x, 4]     #search_for <- AllNICrimeData$Location[x,4]  }
for (x in 10) {     print(x)     AllNICrimeData$Location[x]     #search_for <- AllNICrimeData$Location[x,4]  }
for (x in 10) {     print('x = ', x)     AllNICrimeData$Location[x]     #search_for <- AllNICrimeData$Location[x,4]  }
for (i in 1:10) {     print(i) }
for (x in 1:10) {     print('x = ', x)     AllNICrimeData$Location[x]     #search_for <- AllNICrimeData$Location[x,4]  }
for (i in 1:10) {     print(i) }
for (x in 1:10) {     print(x)     AllNICrimeData$Location[x]     #search_for <- AllNICrimeData$Location[x,4]  }
for (x in 0:10) {     print(x)     AllNICrimeData$Location[x]     #search_for <- AllNICrimeData$Location[x,4]  }
for (x in 0:10) {     print(x)     print(paste('location ', x, ' ', AllNICrimeData$Location[x]))     #search_for <- AllNICrimeData$Location[x,4]  }
for (x in 0:10) {    # print(x)    # print(paste('location ', x, ' ', AllNICrimeData$Location[x]))     search_for <- AllNICrimeData$Location[x]     search_for }
for (x in 0:10) {    # print(x)    # print(paste('location ', x, ' ', AllNICrimeData$Location[x]))     search_for <- AllNICrimeData$Location[x]     print(search_for) }
find_a_postcode <- function(location, postcodes) {     #matches <- if (postcodes$Primary_Thorfare == location)     print(paste('received ', location))     matches <- postcodes$Primary_Thorfare == location]     return (matches) }
find_a_postcode <- function(location, postcodes) {     #matches <- if (postcodes$Primary_Thorfare == location)     print(paste('received ', location))     matches <- postcodes[postcodes$Primary_Thorfare == location] #my_data$Age[my_data$Age == 99] <- NA     return (matches) }
#postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv')
#head(postcodes)
#head(postcodes$Primary_Thorfare)
for (x in 0:10) {     search_for <- AllNICrimeData$Location[x]     print(search_for)     answer <- find_a_postcode(AllNICrimeData$Location, postcodes)     print(answer) }
for (x in 0:10) {     search_for <- AllNICrimeData$Location[x]     print(search_for)     answer <- find_a_postcode(search_for, postcodes)     print(answer) }
find_a_postcode <- function(location, postcodes) {     #matches <- if (postcodes$Primary_Thorfare == location)     print(paste('received ', location))     matches <- postcodes[postcodes$Primary_Thorfare == location] #my_data$Age[my_data$Age == 99] <- NA     return (matches) }
head(AllNICrimeData)
ReadFiles <- function(folder) {     fullpath <- paste(folder, '/', folder, '-northern-ireland-street.csv', sep = '')     new_data <- read.csv(fullpath)     print(paste(folder, nrow(new_data)))     return(new_data) }
#a) ###############################################################################################################
folders <- list.files(path = '.',)
i <- 0
for (x in folders) {     new_data <- ReadFiles(x)     if (i == 0){         AllNICrimeData <- new_data     }     else {         AllNICrimeData <- rbind(AllNICrimeData, new_data)     }     i = i + 1 }
print(paste('Total Number of Rows ', nrow(AllNICrimeData)))
head(AllNICrimeData)
str(AllNICrimeData)
write.csv(AllNICrimeData, file = '2017-12/AllNICrimeData.csv', quote = FALSE, na = " ", row.names = FALSE)
#b) Remove a number of attributes##################################################################################
AllNICrimeData.bkup.b <- AllNICrimeData
#AllNICrimeDate <- AllNICrimeData.bkup.b
#Remove CrimeID(1), Reported by(3) , Falls within(4), LSOA code(8), LSOA name(9), last outcome(11) and context(12).
drop_cols <- c(1, 3, 4, 8, 9, 11, 12)
AllNICrimeData <- subset(AllNICrimeData, select = -drop_cols)
str(AllNICrimeData)
head(AllNICrimeData)
#(c) Factorise the Crime type attribute. Show the modified structure ##############################################
AllNICrimeData.bkup.c <- AllNICrimeData
#AllNICrimeDate <- AllNICrimeData.bkup.c
attach(AllNICrimeData) # not woring for some reason
AllNICrimeData$Location <- sub('on or near ', '', AllNICrimeData$Location, ignore.case = TRUE)
AllNICrimeData$Location[AllNICrimeData$Location == ''] <- NA
str(AllNICrimeData)
head(AllNICrimeData)
#d) Lookup postcode ###############################################################################################
find_a_postcode <- function(location, postcodes) {     #matches <- if (postcodes$Primary_Thorfare == location)     print(paste('received ', location))     matches <- postcodes[postcodes$Primary_Thorfare == location] #my_data$Age[my_data$Age == 99] <- NA     return (matches) }
#postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv')
#head(postcodes)
#head(postcodes$Primary_Thorfare)
for (x in 0:10) {     search_for <- AllNICrimeData$Location[x]     print(search_for)     answer <- find_a_postcode(search_for, postcodes)     print(answer) }
postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv')
#head(postcodes)
#head(postcodes$Primary_Thorfare)
for (x in 0:10) {     search_for <- AllNICrimeData$Location[x]     print(search_for)     answer <- find_a_postcode(search_for, postcodes)     print(answer) }
find_a_postcode <- function(location, postcodes) {     #matches <- if (postcodes$Primary_Thorfare == location)     print(paste('received ', location))     matches <- postcodes[postcodes$Primary_Thorfare == location] #my_data$Age[my_data$Age == 99] <- NA     print(paste('matches ', matches))     return (matches) }
for (x in 0:10) {     search_for <- AllNICrimeData$Location[x]     print(search_for)     answer <- find_a_postcode(search_for, postcodes)     print(paste('answer ', answer)) }
head(postcodes$Primary_Thorfare)
find_a_postcode <- function(location, postcodes) {     #matches <- if (postcodes$Primary_Thorfare == location)     print(paste('received ', location))     matches <- postcodes$Primary_Thorfare[postcodes$Primary_Thorfare == location] #my_data$Age[my_data$Age == 99] <- NA     print(paste('matches ', matches))     return (matches) }
for (x in 0:10) {     search_for <- AllNICrimeData$Location[x]     print(search_for)     answer <- find_a_postcode(search_for, postcodes)     print(paste('answer ', answer)) }
for (x in 0:10) {     search_for <- AllNICrimeData$Location[x]     print(paste('send ', search_for))     answer <- find_a_postcode(search_for, postcodes)     print(paste('answer ', answer)) }
find_a_postcode <- function(location, postcodes) {     #matches <- if (postcodes$Primary_Thorfare == location)     print(paste('received ', location))     matches <- postcodes$Primary_Thorfare[postcodes$Primary_Thorfare == location] #my_data$Age[my_data$Age == 99] <- NA     print(paste('matches ', matches))     return (matches) }
for (x in 1:10) {     search_for <- AllNICrimeData$Location[x]     print(paste('send ', search_for))     answer <- find_a_postcode(search_for, postcodes)     print(paste('answer ', answer)) }
head(postcodes$Primary_Thorfare)
for (x in 1:10) {     search_for <- AllNICrimeData$Location[x]     print(paste('send ', search_for))     answer <- find_a_postcode(search_for, postcodes)     print(paste('answer ', answer)) }
find_a_postcode <- function(location, postcodes) {     #matches <- if (postcodes$Primary_Thorfare == location)     print(paste('received ', location))     matches <- postcodes$Primary_Thorfare[postcodes$Primary_Thorfare == location] #my_data$Age[my_data$Age == 99] <- NA     #print(paste('matches ', matches))     return (matches) }
for (x in 1:10) {     search_for <- toupper(AllNICrimeData$Location[x])     if (search_for != NA){         print(paste('send ', search_for))         answer <- find_a_postcode(search_for, postcodes)         print(paste('answer ', answer))     }     else {         print(paste('skip ', search_for))     } }
for (x in 1:10) {     search_for <- toupper(AllNICrimeData$Location[x])     if (search_for != 'NA'){         print(paste('send ', search_for))         answer <- find_a_postcode(search_for, postcodes)         print(paste('answer ', answer))     }     else {         print(paste('skip ', search_for))     } }
for (x in 1:10) {     search_for <- toupper(AllNICrimeData$Location[x])     if (!is.na(search_for) == TRUE){         print(paste('send ', search_for))         answer <- find_a_postcode(search_for, postcodes)         print(paste('answer ', answer))     }     else {         print(paste('skip ', search_for))     } }
#answer <-<lookup(terms, key.match, key.reassign = NULL,  missing = NA)
for (x in 1:10) {     search_for <- toupper(AllNICrimeData$Location[x])     if (is.na(search_for) == FALSE){         print(paste('send ', search_for))         answer <- find_a_postcode(search_for, postcodes)         print(paste('answer ', answer))     }     else {         print(paste('skip ', search_for))     } }
head(postcodes)
find_a_postcode <- function(location, postcodes) {     #matches <- if (postcodes$Primary_Thorfare == location)     print(paste('received ', location))     #matches <- postcodes$Primary_Thorfare[postcodes$Primary_Thorfare == location]     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]     return (matches) }
#postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv')
##head(postcodes)
head(postcodes$Primary_Thorfare)
for (x in 1:10) {     search_for <- toupper(AllNICrimeData$Location[x])     if (is.na(search_for) == FALSE){         print(paste('send ', search_for))         answer <- find_a_postcode(search_for, postcodes)         print(paste('answer ', answer))     }     else {         print(paste('skip ', search_for))     } }
find_a_postcode <- function(location, postcodes) {     #matches <- if (postcodes$Primary_Thorfare == location)     print(paste('received ', location))     #matches <- postcodes$Primary_Thorfare[postcodes$Primary_Thorfare == location]     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]     matches <- unique(matches)     return (matches) }
#postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv')
for (x in 1:10) {     search_for <- toupper(AllNICrimeData$Location[x])     if (is.na(search_for) == FALSE){         print(paste('send ', search_for))         answer <- find_a_postcode(search_for, postcodes)         print(paste('answer ', answer))     }     else {         print(paste('skip ', search_for))     } }
#answer <-<lookup(terms, key.match, key.reassign = NULL,  missing = NA)
find_a_postcode <- function(location, postcodes) {     #matches <- if (postcodes$Primary_Thorfare == location)     print(paste('received ', location))     #matches <- postcodes$Primary_Thorfare[postcodes$Primary_Thorfare == location]     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]     matches <- unique(matches)     return (matches) }
#postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv')
##head(postcodes)
head(postcodes$Primary_Thorfare)
for (x in 1:10) {     search_for <- toupper(AllNICrimeData$Location[x])     if (is.na(search_for) == FALSE){         print(paste('send ', search_for))         answer <- find_a_postcode(search_for, postcodes)         print(paste('answer ', answer))     }     else {         print(paste('skip ', search_for))     }     print(paste('freq ', summary(as.factor((answer))))) }
for (x in 1:10) {     search_for <- toupper(AllNICrimeData$Location[x])     if (is.na(search_for) == FALSE){         print(paste('send ', search_for))         answer <- find_a_postcode(search_for, postcodes)         print(paste('answer ', answer))         print(paste('freq ', summary(as.factor(answer))))     }     else {         print(paste('skip ', search_for))     }     #print(paste('freq ', summary(as.factor((answer))))) }
#d) Lookup postcode ###############################################################################################
find_a_postcode <- function(location, postcodes) {     #matches <- if (postcodes$Primary_Thorfare == location)     print(paste('received ', location))     #matches <- postcodes$Primary_Thorfare[postcodes$Primary_Thorfare == location]     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]     print(paste('freq ', summary(as.factor(answer))))     matches <- unique(matches)     return (matches) }
#postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv')
##head(postcodes)
head(postcodes$Primary_Thorfare)
for (x in 1:10) {     search_for <- toupper(AllNICrimeData$Location[x])     if (is.na(search_for) == FALSE){         print(paste('send ', search_for))         answer <- find_a_postcode(search_for, postcodes)         print(paste('answer ', answer))     }     else {         print(paste('skip ', search_for))     }     #print(paste('freq ', summary(as.factor((answer))))) }
find_a_postcode <- function(location, postcodes) {     #matches <- if (postcodes$Primary_Thorfare == location)     print(paste('received ', location))     #matches <- postcodes$Primary_Thorfare[postcodes$Primary_Thorfare == location]     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]     print(paste('freq ', summary(as.factor(matches))))     matches <- unique(matches)     return (matches) }
#postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv')
##head(postcodes)
head(postcodes$Primary_Thorfare)
for (x in 1:10) {     search_for <- toupper(AllNICrimeData$Location[x])     if (is.na(search_for) == FALSE){         print(paste('send ', search_for))         answer <- find_a_postcode(search_for, postcodes)         print(paste('answer ', answer))     }     else {         print(paste('skip ', search_for))     }     #print(paste('freq ', summary(as.factor((answer))))) }
#answer <-<lookup(terms, key.match, key.reassign = NULL,  missing = NA)
find_a_postcode <- function(location, postcodes) {     #matches <- if (postcodes$Primary_Thorfare == location)     print(paste('received ', location))     #matches <- postcodes$Primary_Thorfare[postcodes$Primary_Thorfare == location]     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]     print(paste('freq ', summary(as.factor(matches))))     print(paste('max ', max(summary(as.factor(matches)))))     matches <- unique(matches)     return (matches) }
#postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv')
##head(postcodes)
head(postcodes$Primary_Thorfare)
for (x in 1:10) {     search_for <- toupper(AllNICrimeData$Location[x])     if (is.na(search_for) == FALSE){         print(paste('send ', search_for))         answer <- find_a_postcode(search_for, postcodes)         print(paste('answer ', answer))     }     else {         print(paste('skip ', search_for))     }     #print(paste('freq ', summary(as.factor((answer))))) }
find_a_postcode <- function(location, postcodes) {     #matches <- if (postcodes$Primary_Thorfare == location)     print(paste('received ', location))     #matches <- postcodes$Primary_Thorfare[postcodes$Primary_Thorfare == location]     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]     print(paste('freq ', summary(as.factor(matches))))     print(paste('max ', max(summary(as.factor(matches)))))     print(paste('max ', postcodes$Postcode[max(summary(as.factor(matches)))]))     matches <- unique(matches)     return (matches) }
#postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv')
##head(postcodes)
head(postcodes$Primary_Thorfare)
for (x in 1:10) {     search_for <- toupper(AllNICrimeData$Location[x])     if (is.na(search_for) == FALSE){         print(paste('send ', search_for))         answer <- find_a_postcode(search_for, postcodes)         print(paste('answer ', answer))     }     else {         print(paste('skip ', search_for))     }     #print(paste('freq ', summary(as.factor((answer))))) }
#answer <-<lookup(terms, key.match, key.reassign = NULL,  missing = NA)
find_a_postcode <- function(location, postcodes) {     #matches <- if (postcodes$Primary_Thorfare == location)     print(paste('received ', location))     #matches <- postcodes$Primary_Thorfare[postcodes$Primary_Thorfare == location]     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]     #print(paste('freq ', summary(as.factor(matches))))     #print(paste('max ', max(summary(as.factor(matches)))))     #print(paste('max ', postcodes$Postcode[max(summary(as.factor(matches)))]))     print(paste('max ', which.max(table(as.character(matches)))))     matches <- unique(matches)     return (matches) }
#postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv')
##head(postcodes)
head(postcodes$Primary_Thorfare)
for (x in 1:10) {     search_for <- toupper(AllNICrimeData$Location[x])     if (is.na(search_for) == FALSE){         print(paste('send ', search_for))         answer <- find_a_postcode(search_for, postcodes)         print(paste('answer ', answer))     }     else {         print(paste('skip ', search_for))     }     #print(paste('freq ', summary(as.factor((answer))))) }
#d) Lookup postcode ###############################################################################################
find_a_postcode <- function(location, postcodes) {     #matches <- if (postcodes$Primary_Thorfare == location)     print(paste('received ', location))     #matches <- postcodes$Primary_Thorfare[postcodes$Primary_Thorfare == location]     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]     #print(paste('freq ', summary(as.factor(matches))))     #print(paste('max ', max(summary(as.factor(matches)))))     #print(paste('max ', postcodes$Postcode[max(summary(as.factor(matches)))]))     max_occ <- which.max(table(as.character(matches)))     print(paste('max ', max_occ))     print(paste('max ', matches[mx_occ]))     matches <- unique(matches)     return (matches)  }
#postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv')
##head(postcodes)
head(postcodes$Primary_Thorfare)
for (x in 1:10) {     search_for <- toupper(AllNICrimeData$Location[x])     if (is.na(search_for) == FALSE){         print(paste('send ', search_for))         answer <- find_a_postcode(search_for, postcodes)         print(paste('answer ', answer))     }     else {         print(paste('skip ', search_for))     }     #print(paste('freq ', summary(as.factor((answer))))) }
#answer <-<lookup(terms, key.match, key.reassign = NULL,  missing = NA)
find_a_postcode <- function(location, postcodes) {     #matches <- if (postcodes$Primary_Thorfare == location)     print(paste('received ', location))     #matches <- postcodes$Primary_Thorfare[postcodes$Primary_Thorfare == location]     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]     #print(paste('freq ', summary(as.factor(matches))))     #print(paste('max ', max(summary(as.factor(matches)))))     #print(paste('max ', postcodes$Postcode[max(summary(as.factor(matches)))]))     max_occ <- which.max(table(as.character(matches)))     print(paste('max ', max_occ))     print(paste('max ', matches[max_occ]))     matches <- unique(matches)     return (matches)  }
#postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv')
##head(postcodes)
head(postcodes$Primary_Thorfare)
for (x in 1:10) {     search_for <- toupper(AllNICrimeData$Location[x])     if (is.na(search_for) == FALSE){         print(paste('send ', search_for))         answer <- find_a_postcode(search_for, postcodes)         print(paste('answer ', answer))     }     else {         print(paste('skip ', search_for))     }     #print(paste('freq ', summary(as.factor((answer))))) }
#answer <-<lookup(terms, key.match, key.reassign = NULL,  missing = NA)
#answer <- find_a_postcode(AllNICrimeData$Location, postcodes)
find_a_postcode <- function(location, postcodes) {     #matches <- if (postcodes$Primary_Thorfare == location)     print(paste('received ', location))     #matches <- postcodes$Primary_Thorfare[postcodes$Primary_Thorfare == location]     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]     #print(paste('freq ', summary(as.factor(matches))))     #print(paste('max ', max(summary(as.factor(matches)))))     #print(paste('max ', postcodes$Postcode[max(summary(as.factor(matches)))]))     print(paste('matches ', matches))     max_occ <- which.max(table(as.character(matches)))     print(paste('max ', max_occ))     print(paste('max ', matches[max_occ]))     matches <- unique(matches)     return (matches)  }
#postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv')
##head(postcodes)
head(postcodes$Primary_Thorfare)
for (x in 1:10) {     search_for <- toupper(AllNICrimeData$Location[x])     if (is.na(search_for) == FALSE){         print(paste('send ', search_for))         answer <- find_a_postcode(search_for, postcodes)         #print(paste('answer ', answer))     }     else {         print(paste('skip ', search_for))     } }
find_a_postcode <- function(location, postcodes) {     #matches <- if (postcodes$Primary_Thorfare == location)     print(paste('received ', location))     #matches <- postcodes$Primary_Thorfare[postcodes$Primary_Thorfare == location]     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]     #print(paste('freq ', summary(as.factor(matches))))     #print(paste('max ', max(summary(as.factor(matches)))))     #print(paste('max ', postcodes$Postcode[max(summary(as.factor(matches)))]))     print(paste(length(matches), ' matches ', matches))     max_occ <- which.max(table(as.character(matches)))     print(paste('max ', max_occ))     print(paste('max ', matches[max_occ]))     matches <- unique(matches)     return (matches)  }
#postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv')
##head(postcodes)
head(postcodes$Primary_Thorfare)
for (x in 1:10) {     search_for <- toupper(AllNICrimeData$Location[x])     if (is.na(search_for) == FALSE){         print(paste('send ', search_for))         answer <- find_a_postcode(search_for, postcodes)         #print(paste('answer ', answer))     }     else {         print(paste('skip ', search_for))     } }
#answer <-<lookup(terms, key.match, key.reassign = NULL,  missing = NA)
find_a_postcode <- function(location, postcodes) {     #matches <- if (postcodes$Primary_Thorfare == location)     print(paste('received ', location))     #matches <- postcodes$Primary_Thorfare[postcodes$Primary_Thorfare == location]     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]     #print(paste('freq ', summary(as.factor(matches))))     #print(paste('max ', max(summary(as.factor(matches)))))     #print(paste('max ', postcodes$Postcode[max(summary(as.factor(matches)))]))     print(paste(length(matches), ' matches '))     print(paste(length(unique(matches)), ' unique matches '))     max_occ <- which.max(table(as.character(matches)))     print(paste('max ', max_occ))     print(paste('max ', matches[max_occ]))     matches <- unique(matches)     return (matches)  }
#postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv')
##head(postcodes)
head(postcodes$Primary_Thorfare)
for (x in 1:10) {     search_for <- toupper(AllNICrimeData$Location[x])     if (is.na(search_for) == FALSE){         print(paste('send ', search_for))         answer <- find_a_postcode(search_for, postcodes)         #print(paste('answer ', answer))     }     else {         print(paste('skip ', search_for))     } }
#answer <-<lookup(terms, key.match, key.reassign = NULL,  missing = NA)
find_a_postcode <- function(location, postcodes) {     #matches <- if (postcodes$Primary_Thorfare == location)     print(paste('received ', location))     #matches <- postcodes$Primary_Thorfare[postcodes$Primary_Thorfare == location]     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]     #print(paste('freq ', summary(as.factor(matches))))     #print(paste('max ', max(summary(as.factor(matches)))))     #print(paste('max ', postcodes$Postcode[max(summary(as.factor(matches)))]))     print(paste(' '))     print(paste(length(matches), ' matches '))     print(paste(length(unique(matches)), ' unique matches '))     print(paste(' matches ', matches))     max_occ <- which.max(table(as.character(matches)))     print(paste('max ', max_occ))     print(paste('max ', matches[max_occ]))     matches <- unique(matches)     return (matches)  }
#postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv')
##head(postcodes)
head(postcodes$Primary_Thorfare)
for (x in 1:10) {     search_for <- toupper(AllNICrimeData$Location[x])     if (is.na(search_for) == FALSE){         print(paste('send ', search_for))         answer <- find_a_postcode(search_for, postcodes)         #print(paste('answer ', answer))     }     else {         print(paste('skip ', search_for))     } }
find_a_postcode <- function(location, postcodes) {     #matches <- if (postcodes$Primary_Thorfare == location)     print(paste('received ', location))     #matches <- postcodes$Primary_Thorfare[postcodes$Primary_Thorfare == location]     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]     #print(paste('freq ', summary(as.factor(matches))))     #print(paste('max ', max(summary(as.factor(matches)))))     #print(paste('max ', postcodes$Postcode[max(summary(as.factor(matches)))]))     print(paste(' '))     print(paste(length(matches), ' matches '))     print(paste(length(unique(matches)), ' unique matches '))     print(paste(' matches ', matches))     max_occ <- which.max(table(as.character(matches)))     print(paste('max ', max_occ))     print(paste('max ', matches[max_occ]))     print(paste('table ', table(do.call(paste, as.data.frame(matches)))))     matches <- unique(matches)     return (matches)  }
#postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv')
##head(postcodes)
head(postcodes$Primary_Thorfare)
for (x in 1:10) {     search_for <- toupper(AllNICrimeData$Location[x])     if (is.na(search_for) == FALSE){         print(paste('send ', search_for))         answer <- find_a_postcode(search_for, postcodes)         #print(paste('answer ', answer))     }     else {         print(paste('skip ', search_for))     } }
#answer <-<lookup(terms, key.match, key.reassign = NULL,  missing = NA)
#d) Lookup postcode ###############################################################################################
find_a_postcode <- function(location, postcodes) {     #matches <- if (postcodes$Primary_Thorfare == location)     print(paste('received ', location))     #matches <- postcodes$Primary_Thorfare[postcodes$Primary_Thorfare == location]     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]     matches <- sort(matches, decreasing = TRUE     #print(paste('freq ', summary(as.factor(matches))))     #print(paste('max ', max(summary(as.factor(matches)))))     #print(paste('max ', postcodes$Postcode[max(summary(as.factor(matches)))]))     print(paste(' '))     print(paste(length(matches), ' matches '))     print(paste(length(unique(matches)), ' unique matches '))     print(paste(' matches ', matches))     max_occ <- which.max(table(as.character(matches)))     print(paste('max ', max_occ))     print(paste('max ', matches[max_occ]))     print(paste('table ', table(do.call(paste, as.data.frame(matches)))))     matches <- unique(matches)     return (matches)  }
#postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv')
##head(postcodes)
head(postcodes$Primary_Thorfare)
for (x in 1:10) {     search_for <- toupper(AllNICrimeData$Location[x])     if (is.na(search_for) == FALSE){         print(paste('send ', search_for))         answer <- find_a_postcode(search_for, postcodes)         #print(paste('answer ', answer))     }     else {         print(paste('skip ', search_for))     } }
#answer <-<lookup(terms, key.match, key.reassign = NULL,  missing = NA)
#answer <- find_a_postcode(AllNICrimeData$Location, postcodes)
find_a_postcode <- function(location, postcodes) {     #matches <- if (postcodes$Primary_Thorfare == location)     print(paste('received ', location))     #matches <- postcodes$Primary_Thorfare[postcodes$Primary_Thorfare == location]     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]     matches <- sort(matches, decreasing = TRUE)     #print(paste('freq ', summary(as.factor(matches))))     #print(paste('max ', max(summary(as.factor(matches)))))     #print(paste('max ', postcodes$Postcode[max(summary(as.factor(matches)))]))     print(paste(' '))     print(paste(length(matches), ' matches '))     print(paste(length(unique(matches)), ' unique matches '))     print(paste(' matches ', matches))     max_occ <- which.max(table(as.character(matches)))     print(paste('max ', max_occ))     print(paste('max ', matches[max_occ]))     print(paste('table ', table(do.call(paste, as.data.frame(matches)))))     matches <- unique(matches)     return (matches)  }
#postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv')
##head(postcodes)
head(postcodes$Primary_Thorfare)
for (x in 1:10) {     search_for <- toupper(AllNICrimeData$Location[x])     if (is.na(search_for) == FALSE){         print(paste('send ', search_for))         answer <- find_a_postcode(search_for, postcodes)         #print(paste('answer ', answer))     }     else {         print(paste('skip ', search_for))     } }
#answer <-<lookup(terms, key.match, key.reassign = NULL,  missing = NA)
#answer <- find_a_postcode(AllNICrimeData$Location, postcodes)
#answer
find_a_postcode <- function(location, postcodes) {     #matches <- if (postcodes$Primary_Thorfare == location)     print(paste('received ', location))     #matches <- postcodes$Primary_Thorfare[postcodes$Primary_Thorfare == location]     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]     matches <- sort(matches, decreasing = TRUE)     #print(paste('freq ', summary(as.factor(matches))))     #print(paste('max ', max(summary(as.factor(matches)))))     #print(paste('max ', postcodes$Postcode[max(summary(as.factor(matches)))]))     print(paste(' '))     print(paste(length(matches), ' matches '))     print(paste(length(unique(matches)), ' unique matches '))     print(paste(' matches ', matches))     max_occ <- which.max(table(as.character(matches)))     print(paste('max ', max_occ))     print(paste('max ', matches[max_occ]))     print(paste('which.max ', which.max.simple(matches, na.rm = TRUE, tie_value = first)))     print(paste('table ', table(do.call(paste, as.data.frame(matches)))))     matches <- unique(matches)     return (matches)  }
#postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv')
##head(postcodes)
head(postcodes$Primary_Thorfare)
for (x in 1:10) {     search_for <- toupper(AllNICrimeData$Location[x])     if (is.na(search_for) == FALSE){         print(paste('send ', search_for))         answer <- find_a_postcode(search_for, postcodes)         #print(paste('answer ', answer))     }     else {         print(paste('skip ', search_for))     } }
#answer <-<lookup(terms, key.match, key.reassign = NULL,  missing = NA)
#answer <- find_a_postcode(AllNICrimeData$Location, postcodes)
#answer
find_a_postcode <- function(location, postcodes) {     #matches <- if (postcodes$Primary_Thorfare == location)     print(paste('received ', location))     #matches <- postcodes$Primary_Thorfare[postcodes$Primary_Thorfare == location]     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]     matches <- sort(matches, decreasing = TRUE)     #print(paste('freq ', summary(as.factor(matches))))     #print(paste('max ', max(summary(as.factor(matches)))))     #print(paste('max ', postcodes$Postcode[max(summary(as.factor(matches)))]))     print(paste(' '))     print(paste(length(matches), ' matches '))     print(paste(length(unique(matches)), ' unique matches '))     print(paste(' matches ', matches))     max_occ <- which.max(table(as.character(matches)))     print(paste('max ', max_occ))     print(paste('max ', matches[max_occ]))     print(paste('which.max ', which.max.simple(matches, na.rm = TRUE, tie_value = first)))     print(paste('mode ', mode(matches)))     print(paste('mode val ', matches(mode(matches))))     print(paste('table ', table(do.call(paste, as.data.frame(matches)))))     matches <- unique(matches)     return (matches)  }
#postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv')
##head(postcodes)
head(postcodes$Primary_Thorfare)
for (x in 1:10) {     search_for <- toupper(AllNICrimeData$Location[x])     if (is.na(search_for) == FALSE){         print(paste('send ', search_for))         answer <- find_a_postcode(search_for, postcodes)         #print(paste('answer ', answer))     }     else {         print(paste('skip ', search_for))     } }
#answer <-<lookup(terms, key.match, key.reassign = NULL,  missing = NA)
#answer <- find_a_postcode(AllNICrimeData$Location, postcodes)
#answer
find_a_postcode <- function(location, postcodes) {     #matches <- if (postcodes$Primary_Thorfare == location)     print(paste('received ', location))     #matches <- postcodes$Primary_Thorfare[postcodes$Primary_Thorfare == location]     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]     matches <- sort(matches, decreasing = TRUE)     #print(paste('freq ', summary(as.factor(matches))))     #print(paste('max ', max(summary(as.factor(matches)))))     #print(paste('max ', postcodes$Postcode[max(summary(as.factor(matches)))]))     print(paste(' '))     print(paste(length(matches), ' matches '))     print(paste(length(unique(matches)), ' unique matches '))     print(paste(' matches ', matches))     max_occ <- which.max(table(as.character(matches)))     print(paste('max ', max_occ))     print(paste('max ', matches[max_occ]))     #print(paste('which.max ', which.max.simple(matches, na.rm = TRUE, tie_value = first)))     print(paste('mode ', mode(matches)))     print(paste('mode val ', matches(mode(matches))))     print(paste('table ', table(do.call(paste, as.data.frame(matches)))))     matches <- unique(matches)     return (matches)  }
#postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv')
##head(postcodes)
head(postcodes$Primary_Thorfare)
for (x in 1:10) {     search_for <- toupper(AllNICrimeData$Location[x])     if (is.na(search_for) == FALSE){         print(paste('send ', search_for))         answer <- find_a_postcode(search_for, postcodes)         #print(paste('answer ', answer))     }     else {         print(paste('skip ', search_for))     } }
#answer <-<lookup(terms, key.match, key.reassign = NULL,  missing = NA)
#answer <- find_a_postcode(AllNICrimeData$Location, postcodes)
#answer
find_a_postcode <- function(location, postcodes) {     #matches <- if (postcodes$Primary_Thorfare == location)     print(paste('received ', location))     #matches <- postcodes$Primary_Thorfare[postcodes$Primary_Thorfare == location]     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]     matches <- sort(matches, decreasing = TRUE)     #print(paste('freq ', summary(as.factor(matches))))     #print(paste('max ', max(summary(as.factor(matches)))))     #print(paste('max ', postcodes$Postcode[max(summary(as.factor(matches)))]))     print(paste(' '))     print(paste(length(matches), ' matches '))     print(paste(length(unique(matches)), ' unique matches '))     print(paste(' matches ', matches))     max_occ <- which.max(table(as.character(matches)))     print(paste('max ', max_occ))     print(paste('max ', matches[max_occ]))     #print(paste('which.max ', which.max.simple(matches, na.rm = TRUE, tie_value = first)))     print(paste('mode ', mode(matches)))     print(paste('mode val ', matches[mode(matches)]))     print(paste('table ', table(do.call(paste, as.data.frame(matches)))))     matches <- unique(matches)     return (matches)  }
#postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv')
##head(postcodes)
head(postcodes$Primary_Thorfare)
for (x in 1:10) {     search_for <- toupper(AllNICrimeData$Location[x])     if (is.na(search_for) == FALSE){         print(paste('send ', search_for))         answer <- find_a_postcode(search_for, postcodes)         #print(paste('answer ', answer))     }     else {         print(paste('skip ', search_for))     } }
#answer <-<lookup(terms, key.match, key.reassign = NULL,  missing = NA)
#answer <- find_a_postcode(AllNICrimeData$Location, postcodes)
#answer
#d) Lookup postcode ###############################################################################################
GetMostCommon <- function(matches, unique_matches) {     result <- unique_matches[which.max(tabulate(match(matches, unique_matches)))]     print(paste('result ', result))     return (result) }
find_a_postcode <- function(location, postcodes) {     #matches <- if (postcodes$Primary_Thorfare == location)     print(paste('received ', location))     #matches <- postcodes$Primary_Thorfare[postcodes$Primary_Thorfare == location]     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]     #matches <- sort(matches, decreasing = TRUE)     #print(paste('freq ', summary(as.factor(matches))))     #print(paste('max ', max(summary(as.factor(matches)))))     #print(paste('max ', postcodes$Postcode[max(summary(as.factor(matches)))]))     #print(paste(' '))     #print(paste(length(matches), ' matches '))     #print(paste(length(unique(matches)), ' unique matches '))     #print(paste(' matches ', matches))     #max_occ <- which.max(table(as.character(matches)))     #print(paste('max ', max_occ))     #print(paste('max ', matches[max_occ]))     #print(paste('which.max ', which.max.simple(matches, na.rm = TRUE, tie_value = first)))     #print(paste('mode ', mode(matches)))     #print(paste('mode val ', matches[mode(matches)]))     #print(paste('table ', table(do.call(paste, as.data.frame(matches)))))     unique_matches <- unique(matches)     result = unique_matches     if (length(unique_matches) > 1) {         result <- GetMostCommon(matches, unique_matches)     }      return (result)  }
#postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv')
##head(postcodes)
head(postcodes$Primary_Thorfare)
for (x in 1:10) {     search_for <- toupper(AllNICrimeData$Location[x])     if (is.na(search_for) == FALSE){         print(paste('send ', search_for))         answer <- find_a_postcode(search_for, postcodes)         #print(paste('answer ', answer))     }     else {         print(paste('skip ', search_for))     } }
#answer <-<lookup(terms, key.match, key.reassign = NULL,  missing = NA)
y <- sum(!is.na(AllNICrimeData$Location))
y
sum(AllNICrimeData)
sum(AllNICrimeData$Location)
nrow(AllNICrimeData$Location)
nrow(AllNICrimeData)
GetMostCommon <- function(matches, unique_matches) {     result <- unique_matches[which.max(tabulate(match(matches, unique_matches)))]  # Essentially getting the mode of the matches vector     return (result) }
find_a_postcode <- function(location, postcodes) {     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]  # find all matches for the location in the pastcodes dataframe     unique_matches <- unique(matches)      result = unique_matches  # provisional result, if multiples found, will get most frequent     if (length(unique_matches) > 1) {  # no need to get the mode if there's only one unique postcode         result <- GetMostCommon(matches, unique_matches)     }      return (result)  }
postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv')  # load the cleaned postcode dataset
postcode_results <- character(0)
for (x in 1:nrow(AllNICrimeData)) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         postcode_results <- c(postcode_results, answer)         if (x < 50) {             print(paste('building ', postcode_results))         }     } }
for (x in 1:nrow(AllNICrimeData)) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         postcode_results <- c(postcode_results, answer)         if (x < 50) {             print(paste('building ', answer))         }     } }
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20)) {
    search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one
    if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         postcode_results <- c(postcode_results, answer)         if (x < 50) {             print(paste('building ', answer, 'results ', postcode_results))         }     }
}
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         postcode_results <- c(postcode_results, answer)         if (x < 50) {             print(paste('building ', answer, 'results ', postcode_results))         }     } }
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         postcode_results <- c(postcode_results, as.string(answer))         if (x < 50) {             print(paste('building ', answer, 'results ', postcode_results))         }     } }
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         postcode_results <- c(postcode_results, as.char(answer))         if (x < 50) {             print(paste('building ', answer, 'results ', postcode_results))         }     } }
postcode_results <- vector(0)
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         postcode_results <- c(postcode_results, as.char(answer))         if (x < 50) {             print(paste('building ', answer, 'results ', postcode_results))         }     } }
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         postcode_results <- c(postcode_results, answer)         if (x < 50) {             print(paste('building ', answer, 'results ', postcode_results))         }     } }
postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv')  # load the cleaned postcode dataset
postcode_results <- vector(0)
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         postcode_results <- c(postcode_results, answer)         if (x < 50) {             print(paste('building ', answer, 'results ', postcode_results))         }     } }
postcode_results
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         print(paste('answer as string', as.character(answer)))         postcode_results <- c(postcode_results, answer)         if (x < 50) {             print(paste('building ', answer, 'results ', postcode_results))         }     } }
teststr <- 'BT41RF'
print(paste('as int ', as.integer(teststr)))
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         print(paste('answer as string', as.character(answer)))         postcode_results <- c(answer)         if (x < 50) {             print(paste('building ', answer, 'results ', postcode_results))         }     } }
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         print(paste('answer as string', as.factor(answer)))         postcode_results <- c(answer)         if (x < 50) {             print(paste('building ', answer, 'results ', postcode_results))         }     } }
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         answer <- factor(answer)         postcode_results <- c(answer)         if (x < 50) {             print(paste('building ', answer, 'results ', postcode_results))         }     } }
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         answer <- factor(answer)         postcode_results <- append(postcode_results, answer)         if (x < 50) {             print(paste('building ', answer, 'results ', postcode_results))         }     } }
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         postcode_results <- append(postcode_results, answer)         if (x < 50) {             print(paste('building ', answer, 'results ', postcode_results))         }     } }
postcode_results = data.frame()
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         postcode_results <- append(postcode_results, answer)         if (x < 50) {             print(paste('building ', answer, 'results ', postcode_results))         }     } }
postcode_results
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         postcode_results <- c(postcode_results, answer)         if (x < 50) {             print(paste('building ', answer, 'results ', postcode_results))         }     } }
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         postcode_results <- rbind(postcode_results, answer)         if (x < 50) {             print(paste('building ', answer, 'results ', postcode_results))         }     } }
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         postcode_results <- rbind(postcode_results, 'okokok')         if (x < 50) {             print(paste('building ', answer, 'results ', postcode_results))         }     } }
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         postcode_results <- rbind(postcode_results, 'okokok')         if (x < 50) {             print(paste('building ', answer, 'results ', postcode_results))         }     } }
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         print(paste('answer before ', answer))         print(paste('result before ', postcode_results))         postcode_results <- rbind(postcode_results, 'okokok')         print(paste('answer after  ', answer))         print(paste('result after ', postcode_results))         #if (x < 50) {         #    print(paste('building ', answer, 'results ', postcode_results))         #}     } }
postcode_results = data.frame()
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         print(paste('answer before ', answer))         print(paste('result before ', postcode_results))         postcode_results <- rbind(postcode_results, 'okokok')         print(paste('answer after  ', answer))         print(paste('result after ', postcode_results))         #if (x < 50) {         #    print(paste('building ', answer, 'results ', postcode_results))         #}     } }
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         print(paste('answer before ', answer))         print(paste('result before ', postcode_results))         postcode_results <- rbind(postcode_results, answer)         print(paste('answer after  ', answer))         print(paste('result after ', postcode_results))         #if (x < 50) {         #    print(paste('building ', answer, 'results ', postcode_results))         #}     } }
postcode_results = data.frame()
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         print(paste('answer before ', answer))         print(paste('result before ', postcode_results))         postcode_results[x] <- answer         print(paste('answer after  ', answer))         print(paste('result after ', postcode_results))         #if (x < 50) {         #    print(paste('building ', answer, 'results ', postcode_results))         #}     } }
postcode_results
teststr <- 'BT41RF'
postcode_results = data.frame()
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         print(paste('answer before ', answer))         #print(paste('result before ', postcode_results))         postcode_results[x] <- answer         print(paste('answer after  ', answer))         print(paste('result after ', postcode_results))         #if (x < 50) {         #    print(paste('building ', answer, 'results ', postcode_results))         #}     } }
dummy <- c('')
postcode_results = data.frame(dummy)
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         print(paste('answer before ', answer))         #print(paste('result before ', postcode_results))         postcode_results[x] <- answer         print(paste('answer after  ', answer))         print(paste('result after ', postcode_results))         #if (x < 50) {         #    print(paste('building ', answer, 'results ', postcode_results))         #}     } }
postcode_results
dummy <- c('')
postcode_results = data.frame(dummy)
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         print(paste('answer before ', answer))         print(paste('result before ', postcode_results))         postcode_results[x] <- answer         print(paste('answer after  ', answer))         print(paste('result after ', postcode_results))         #if (x < 50) {         #    print(paste('building ', answer, 'results ', postcode_results))         #}     }     else {         postcode_results[x] <- NA     } }
postcode_results
dummy <- c('fuck this')
postcode_results = data.frame(dummy)
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         print(paste('answer before ', answer))         print(paste('result before ', postcode_results))         postcode_results[x] <- answer         print(paste('answer after  ', answer))         print(paste('result after ', postcode_results))         #if (x < 50) {         #    print(paste('building ', answer, 'results ', postcode_results))         #}     }     else {         postcode_results[x] <- NA     } }
dummy <- c('fuck this')
postcode_results = data.frame(dummy)
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         print(paste('answer before ', answer))         print(paste('result before ', postcode_results))         #postcode_results[x] <- answer         dummy <- c(dummy, answer)         print(paste('answer after  ', answer))         print(paste('result after ', postcode_results))         #if (x < 50) {         #    print(paste('building ', answer, 'results ', postcode_results))         #}     }     else {         postcode_results[x] <- NA     } }
postcode_results
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         print(paste('answer before ', answer))         print(paste('result before ', postcode_results))         #postcode_results[x] <- answer         dummy <- c(dummy, answer)         print(paste('answer after  ', answer))         print(paste('result after ', dummy))         #if (x < 50) {         #    print(paste('building ', answer, 'results ', postcode_results))         #}     }     else {         postcode_results[x] <- NA     } }
postcode_results
dummy <- c('fuck this')
postcode_results = data.frame(dummy)
print(paste('postcode 1 ', postcode_results))
postcode_results <- c(postcode_results, 'bollocks')
print(paste('postcode 2 ', postcode_results))
dummy <- c('fuck this', 'bollocks')
postcode_results = data.frame(dummy)
print(paste('postcode 1 ', postcode_results))
postcode_results <- c(postcode_results, 'tired')
print(paste('postcode 2 ', postcode_results))
postcode_results = data.frame('fuck this', 'bollocks')
print(paste('postcode 1 ', postcode_results))
postcode_results <- c(postcode_results, 'tired')
print(paste('postcode 2 ', postcode_results))
ReadFiles <- function(folder) {     fullpath <- paste(folder, '/', folder, '-northern-ireland-street.csv', sep = '')     new_data <- read.csv(fullpath)     print(paste(folder, nrow(new_data)))     return(new_data) }
#a) ###############################################################################################################
folders <- list.files(path = '.',)
i <- 0
for (x in folders) {     new_data <- ReadFiles(x)     if (i == 0){         AllNICrimeData <- new_data     }     else {         AllNICrimeData <- rbind(AllNICrimeData, new_data)     }     i = i + 1 }
print(paste('Total Number of Rows ', nrow(AllNICrimeData)))
head(AllNICrimeData)
str(AllNICrimeData)
ReadFiles <- function(folder) {     fullpath <- paste(folder, '/', folder, '-northern-ireland-street.csv', sep = '')     new_data <- read.csv(fullpath)     print(paste(folder, nrow(new_data)))     return(new_data) }
#a) ###############################################################################################################
folders <- list.files(path = '.',)
i <- 0
for (x in folders) {     new_data <- ReadFiles(x)     if (i == 0){         AllNICrimeData <- new_data     }     else {         AllNICrimeData <- rbind(AllNICrimeData, new_data)     }     i = i + 1 }
print(paste('Total Number of Rows ', nrow(AllNICrimeData)))
head(AllNICrimeData)
str(AllNICrimeData)
ReadFiles <- function(folder) {     fullpath <- paste(folder, '/', folder, '-northern-ireland-street.csv', sep = '')     new_data <- read.csv(fullpath)     print(paste(folder, nrow(new_data)))     return(new_data) }
#a) ###############################################################################################################
folders <- list.files(path = '.',)
i <- 0
for (x in folders) {     new_data <- ReadFiles(x)     if (i == 0){         AllNICrimeData <- new_data     }     else {         AllNICrimeData <- rbind(AllNICrimeData, new_data)     }     i = i + 1 }
folders
folders <- list.files(path = '.',)
folders
i <- 0
for (x in folders) {     new_data <- ReadFiles(x)     if (i == 0){         AllNICrimeData <- new_data     }     else {         AllNICrimeData <- rbind(AllNICrimeData, new_data)     }     i = i + 1 }
print(paste('Total Number of Rows ', nrow(AllNICrimeData)))
head(AllNICrimeData)
str(AllNICrimeData)
write.csv(AllNICrimeData, file = '2017-12/AllNICrimeData.csv', quote = FALSE, na = " ", row.names = FALSE)
#b) Remove a number of attributes##################################################################################
AllNICrimeData.bkup.b <- AllNICrimeData
#AllNICrimeDate <- AllNICrimeData.bkup.b
#Remove CrimeID(1), Reported by(3) , Falls within(4), LSOA code(8), LSOA name(9), last outcome(11) and context(12).
drop_cols <- c(1, 3, 4, 8, 9, 11, 12)
AllNICrimeData <- subset(AllNICrimeData, select = -drop_cols)
str(AllNICrimeData)
head(AllNICrimeData)
#(c) Factorise the Crime type attribute. Show the modified structure ##############################################
AllNICrimeData.bkup.c <- AllNICrimeData
#AllNICrimeDate <- AllNICrimeData.bkup.c
attach(AllNICrimeData) # not woring for some reason
AllNICrimeData$Location <- sub('on or near ', '', AllNICrimeData$Location, ignore.case = TRUE)
AllNICrimeData$Location[AllNICrimeData$Location == ''] <- NA
str(AllNICrimeData)
head(AllNICrimeData)
#d) Lookup postcode ###############################################################################################
GetMostCommon <- function(matches, unique_matches) {     result <- unique_matches[which.max(tabulate(match(matches, unique_matches)))]  # Essentially getting the mode of the matches vector     return (result) }
find_a_postcode <- function(location, postcodes) {     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]  # find all matches for the location in the pastcodes dataframe     unique_matches <- unique(matches)      result = unique_matches  # provisional result, if multiples found, will get most frequent     if (length(unique_matches) > 1) {  # no need to get the mode if there's only one unique postcode         result <- GetMostCommon(matches, unique_matches)     }      return (result)  }
postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv') # load the cleaned postcode dataset
temp <- AllNICrimeData$Location[]
#data.frame(my_data[, c("Patient_Name")])
head(temp)
str(temp)
temp <- AllNICrimeData$Location[]
temp1 <- data.frame(AllNICrimeData[, 2])
#data.frame(my_data[, c("Patient_Name")])
head(temp)
head(temp1)
str(temp)
str(temp1)
temp1 <- data.frame(AllNICrimeData[, 3])
#data.frame(my_data[, c("Patient_Name")])
head(temp)
head(temp1)
temp1 <- data.frame(AllNICrimeData[, 4])
#data.frame(my_data[, c("Patient_Name")])
head(temp)
head(temp1)
temp <- data.frame(AllNICrimeData[, 4])
head(AllNICrimeData)
head(temp)
str(temp)
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         print(paste('answer before ', answer))         temp[x] <- answer         print(paste('answer after  ', answer))         print(paste('result after ', temp[x]))         #if (x < 50) {         #    print(paste('building ', answer, 'results ', postcode_results))         #}     }     else {         postcode_results[x] <- NA     } }
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         print(paste('answer before ', answer))         temp[x] <- answer         print(paste('answer after  ', answer))         print(paste('result after ', temp[x]))         #if (x < 50) {         #    print(paste('building ', answer, 'results ', postcode_results))         #}     }     else {         temp[x] <- NA     } }
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         print(paste('answer before ', x,  answer))         temp[x] <- answer         print(paste('answer after  ', x,  answer))         print(paste('result after ', x, temp[x]))         #if (x < 50) {         #    print(paste('building ', answer, 'results ', postcode_results))         #}     }     else {         temp[x] <- NA     } }
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- find_a_postcode(search_for, postcodes)         print(paste('answer before ', x,  answer))         temp[x] <- answer         print(paste('answer after  ', x,  answer))         print(paste('result after ', x, temp[x]))         str(answer)         str(temp)         #if (x < 50) {         #    print(paste('building ', answer, 'results ', postcode_results))         #}     }     else {         temp[x] <- NA     } }
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- as.character(find_a_postcode(search_for, postcodes))         print(paste('answer before ', x,  answer))         temp[x] <- answer         print(paste('answer after  ', x,  answer))         print(paste('result after ', x, temp[x]))         str(answer)         str(temp)         #if (x < 50) {         #    print(paste('building ', answer, 'results ', postcode_results))         #}     }     else {         temp[x] <- NA     } }
find_a_postcode <- function(location, postcodes) {     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]  # find all matches for the location in the pastcodes dataframe     unique_matches <- unique(matches)      if (length(unique_matches) > 1) {  # no need to get the mode if there's only one unique postcode         result <- GetMostCommon(matches, unique_matches)     }      else {         result = unique_matches[0] # provisional result, if multiples found, will get most frequent         print(paste('check single results ', result))     }     return (result)  }
postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv') # load the cleaned postcode dataset
temp <- data.frame(AllNICrimeData[, 4])
head(AllNICrimeData)
head(temp)
str(temp)
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- as.character(find_a_postcode(search_for, postcodes))         print(paste('answer before ', x,  answer))         temp[x] <- answer         print(paste('answer after  ', x,  answer))         print(paste('result after ', x, temp[x]))         str(answer)         str(temp)         #if (x < 50) {         #    print(paste('building ', answer, 'results ', postcode_results))         #}     }     else {         temp[x] <- NA     } }
find_a_postcode <- function(location, postcodes) {     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]  # find all matches for the location in the pastcodes dataframe     unique_matches <- unique(matches)      if (length(unique_matches) > 1) {  # no need to get the mode if there's only one unique postcode         result <- GetMostCommon(matches, unique_matches)     }      else {         result = unique_matches[1] # provisional result, if multiples found, will get most frequent         print(paste('unique matches when 1 ', unique_matches))         print(paste('check single results ', result))     }     return (result)  }
postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv') # load the cleaned postcode dataset
temp <- data.frame(AllNICrimeData[, 4])
head(AllNICrimeData)
head(temp)
str(temp)
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- as.character(find_a_postcode(search_for, postcodes))         print(paste('answer before ', x,  answer))         temp[x] <- answer         print(paste('answer after  ', x,  answer))         print(paste('result after ', x, temp[x]))         str(answer)         str(temp)         #if (x < 50) {         #    print(paste('building ', answer, 'results ', postcode_results))         #}     }     else {         temp[x] <- NA     } }
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- as.character(find_a_postcode(search_for, postcodes))         print(paste('answer before ', x,  answer))         temp[, x] <- answer         print(paste('answer after  ', x,  answer))         print(paste('result after ', x, temp))         str(answer)         str(temp)         #if (x < 50) {         #    print(paste('building ', answer, 'results ', postcode_results))         #}     }     else {         temp[x] <- NA     } }
find_a_postcode <- function(location, postcodes) {     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]  # find all matches for the location in the pastcodes dataframe     unique_matches <- unique(matches)      if (length(unique_matches) > 1) {  # no need to get the mode if there's only one unique postcode         result <- GetMostCommon(matches, unique_matches)         print(paste('check multi results  ', result))         length(result)         nrow(result)         head(result)         str(result)     }      else {         result = unique_matches[1] # provisional result, if multiples found, will get most frequent         print(paste('check single results ', result))         length(result)         nrow(result)         head(result)         str(result)     }     return (result)  }
postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv') # load the cleaned postcode dataset
temp <- data.frame(AllNICrimeData[, 4])
head(temp)
str(temp)
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x]) # take each location one by one     print(paste('search for ', search_for))     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- as.character(find_a_postcode(search_for, postcodes))         #print(paste('answer before ', x,  answer))         temp[, x] <- answer         #print(paste('answer after  ', x,  answer))         #print(paste('result after ', x, temp))        # str(answer)         #str(temp)         #if (x < 50) {         #    print(paste('building ', answer, 'results ', postcode_results))         #}     }     else {         temp[, x] <- NA     } }
find_a_postcode <- function(location, postcodes) {     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]  # find all matches for the location in the pastcodes dataframe     unique_matches <- unique(matches)      if (length(unique_matches) > 1) {  # no need to get the mode if there's only one unique postcode         result <- GetMostCommon(matches, unique_matches)         print(paste('check multi results  ', result))         print(paste('lenght ', length(result)))         print(paste('nrow   ', nrow(result)))         print(paste('head   ', head(result)))         print(paste('str    ', str(result)))     }      else {         result = unique_matches[1] # provisional result, if multiples found, will get most frequent         print(paste('check single results ', result))         print(paste('lenght ', length(result)))         print(paste('nrow   ', nrow(result)))         print(paste('head   ', head(result)))         print(paste('str    ', str(result)))     }     return (result)  }
#postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv') # load the cleaned postcode dataset
temp <- data.frame(AllNICrimeData[, 4])
head(temp)
str(temp)
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x]) # take each location one by one     print(paste('search for ', search_for))     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- as.character(find_a_postcode(search_for, postcodes))         #print(paste('answer before ', x,  answer))         temp[, x] <- answer         #print(paste('answer after  ', x,  answer))         #print(paste('result after ', x, temp))        # str(answer)         #str(temp)         #if (x < 50) {         #    print(paste('building ', answer, 'results ', postcode_results))         #}     }     else {         temp[, x] <- NA     } }
find_a_postcode <- function(location, postcodes) {     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]  # find all matches for the location in the pastcodes dataframe     unique_matches <- unique(matches)      if (length(unique_matches) > 1) {  # no need to get the mode if there's only one unique postcode         result <- GetMostCommon(matches, unique_matches)         print(paste('check multi results  ', result))         print(paste('lenght ', length(result)))         print(paste('nrow   ', nrow(result)))         print(paste('head   ', head(result)))         print(paste('str    ', str(result)))     }      else {         result <- unique_matches[1] # provisional result, if multiples found, will get most frequent         print(paste('check single results ', result))         print(paste('unique[1] ', unique_matches[1]))         print(paste('lenght ', length(result)))         print(paste('nrow   ', nrow(result)))         print(paste('head   ', head(result)))         print(paste('str    ', str(result)))     }     return (result)  }
#postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv') # load the cleaned postcode dataset
temp <- data.frame(AllNICrimeData[, 4])
head(temp)
str(temp)
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x]) # take each location one by one     print(paste('search for ', search_for))     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- as.character(find_a_postcode(search_for, postcodes))         #print(paste('answer before ', x,  answer))         temp[, x] <- answer         #print(paste('answer after  ', x,  answer))         #print(paste('result after ', x, temp))        # str(answer)         #str(temp)         #if (x < 50) {         #    print(paste('building ', answer, 'results ', postcode_results))         #}     }     else {         temp[, x] <- NA     } }
#
find_a_postcode <- function(location, postcodes) {     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]  # find all matches for the location in the pastcodes dataframe     unique_matches <- unique(matches)      if (length(unique_matches) > 1) {  # no need to get the mode if there's only one unique postcode         result <- GetMostCommon(matches, unique_matches)         print(paste('check multi results  ', result))         print(paste('lenght ', length(result)))         print(paste('nrow   ', nrow(result)))         print(paste('head   ', head(result)))         print(paste('str    ', str(result)))     }      else {         result <- as.character(unique_matches[1]) # provisional result, if multiples found, will get most frequent         print(paste('check single results ', result))         print(paste('unique[1] ', unique_matches[1]))         print(paste('lenght ', length(result)))         print(paste('nrow   ', nrow(result)))         print(paste('head   ', head(result)))         print(paste('str    ', str(result)))     }     return (result)  }
#postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv') # load the cleaned postcode dataset
temp <- data.frame(AllNICrimeData[, 4])
head(temp)
str(temp)
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x]) # take each location one by one     print(paste('search for ', search_for))     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- as.character(find_a_postcode(search_for, postcodes))         #print(paste('answer before ', x,  answer))         temp[, x] <- answer         #print(paste('answer after  ', x,  answer))         #print(paste('result after ', x, temp))        # str(answer)         #str(temp)         #if (x < 50) {         #    print(paste('building ', answer, 'results ', postcode_results))         #}     }     else {         temp[, x] <- NA     } }
#
GetMostCommon <- function(matches, unique_matches) {     result <- as.character(unique_matches[which.max(tabulate(match(matches, unique_matches)))])  # Essentially getting the mode of the matches vector     return (result) }
find_a_postcode <- function(location, postcodes) {     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]  # find all matches for the location in the pastcodes dataframe     unique_matches <- unique(matches)      if (length(unique_matches) > 1) {  # no need to get the mode if there's only one unique postcode         result <- as.character(GetMostCommon(matches, unique_matches))         print(paste('check multi results  ', result))         print(paste('lenght ', length(result)))         print(paste('nrow   ', nrow(result)))         print(paste('head   ', head(result)))         print(paste('str    ', str(result)))     }      else {         result <- as.character(unique_matches[1]) # provisional result, if multiples found, will get most frequent         print(paste('check single results ', result))         print(paste('unique[1] ', unique_matches[1]))         print(paste('lenght ', length(result)))         print(paste('nrow   ', nrow(result)))         print(paste('head   ', head(result)))         print(paste('str    ', str(result)))     }     return (result)  }
#postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv') # load the cleaned postcode dataset
temp <- data.frame(AllNICrimeData[, 4])
head(temp)
str(temp)
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x]) # take each location one by one     print(paste('search for ', search_for))     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- as.character(find_a_postcode(search_for, postcodes))         #print(paste('answer before ', x,  answer))         temp[, x] <- answer         #print(paste('answer after  ', x,  answer))         #print(paste('result after ', x, temp))        # str(answer)         #str(temp)         #if (x < 50) {         #    print(paste('building ', answer, 'results ', postcode_results))         #}     }     else {         temp[, x] <- NA     } }
#
#
temp <- vector(length = 0)
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x]) # take each location one by one     print(paste('search for ', search_for))     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- as.character(find_a_postcode(search_for, postcodes))         #print(paste('answer before ', x,  answer))         temp <- c(temp, answer)         print(paste('answer after  ', x,  answer))         print(paste('result after ', x, temp))        # str(answer)         #str(temp)         #if (x < 50) {         #    print(paste('building ', answer, 'results ', postcode_results))         #}     }     else {         temp[, x] <- NA     } }
#
temp <- vector(length = 0)
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x]) # take each location one by one     print(paste('search for ', search_for))     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- as.character(find_a_postcode(search_for, postcodes))         #print(paste('answer before ', x,  answer))         temp <- c(temp, answer)         print(paste('answer after  ', x,  answer))         print(paste('result after ', x, temp))        # str(answer)         #str(temp)         #if (x < 50) {         #    print(paste('building ', answer, 'results ', postcode_results))         #}     }     else {         temp <- c(temp, NA)     } }
#
GetMostCommon <- function(matches, unique_matches) {     result <- as.character(unique_matches[which.max(tabulate(match(matches, unique_matches)))])  # Essentially getting the mode of the matches vector     return (result) }
find_a_postcode <- function(location, postcodes) {     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]  # find all matches for the location in the pastcodes dataframe     unique_matches <- unique(matches)      if (length(unique_matches) > 1) {  # no need to get the mode if there's only one unique postcode         result <- as.character(GetMostCommon(matches, unique_matches))         #print(paste('check multi results  ', result))         #print(paste('lenght ', length(result)))         #print(paste('nrow   ', nrow(result)))         #print(paste('head   ', head(result)))         #print(paste('str    ', str(result)))     }      else {         result <- as.character(unique_matches[1]) # provisional result, if multiples found, will get most frequent         #print(paste('check single results ', result))         #print(paste('unique[1] ', unique_matches[1]))         #print(paste('lenght ', length(result)))         #print(paste('nrow   ', nrow(result)))         #print(paste('head   ', head(result)))         #print(paste('str    ', str(result)))     }     return (result)  }
#postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv') # load the cleaned postcode dataset
postcode_lookups <- vector(length = 0)
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x]) # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- as.character(find_a_postcode(search_for, postcodes))         postcode_lookups <- c(postcode_lookups, answer)     }     else {         postcode_lookups <- c(postcode_lookups, NA)     } }
head(postcode_lookups)
nrow(postcode_lookups)
#
#
#
#
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x]) # take each location one by one     print(paste('search for ', x, search_for))     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- as.character(find_a_postcode(search_for, postcodes))         postcode_lookups <- c(postcode_lookups, answer)     }     else {         postcode_lookups <- c(postcode_lookups, NA)     } }
head(postcode_lookups)
nrow(postcode_lookups)
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x]) # take each location one by one     print(paste('search for ', x, search_for))     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- as.character(find_a_postcode(search_for, postcodes))         print(paste('adding ', x, answer))         postcode_lookups <- c(postcode_lookups, answer)     }     else {         postcode_lookups <- c(postcode_lookups, NA)     } }
head(postcode_lookups)
nrow(postcode_lookups)
#
postcode_lookups
find_a_postcode <- function(location, postcodes) {     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]  # find all matches for the location in the pastcodes dataframe     unique_matches <- unique(matches)      if (length(unique_matches) > 1) {  # only get the mode if there's more than one unique postcode         result <- as.character(GetMostCommon(matches, unique_matches))         #print(paste('check multi results  ', result))         #print(paste('lenght ', length(result)))         #print(paste('nrow   ', nrow(result)))         #print(paste('head   ', head(result)))         #print(paste('str    ', str(result)))     }      else {         if (length(unique_matches) == 1) {  # only one postcode found             result <- as.character(unique_matches[1]) # provisional result, if multiples found, will get most frequent         }         else {  # no postcodes found             result <- 'Not Found'             print(paste('*****************************'))             print(paste('NO RESULT FOR ', location))             print(paste('*****************************'))         }         #print(paste('check single results ', result))         #print(paste('unique[1] ', unique_matches[1]))         #print(paste('lenght ', length(result)))         #print(paste('nrow   ', nrow(result)))         #print(paste('head   ', head(result)))         #print(paste('str    ', str(result)))     }     return (result)  }
#postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv') # load the cleaned postcode dataset
postcode_lookups <- vector(length = 0)
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:20) {     search_for <- toupper(AllNICrimeData$Location[x]) # take each location one by one     print(paste('search for ', x, search_for))     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- as.character(find_a_postcode(search_for, postcodes))         print(paste('adding ', x, answer))         postcode_lookups <- c(postcode_lookups, answer)     }     else {         postcode_lookups <- c(postcode_lookups, NA)     } }
postcode_lookups
find_a_postcode <- function(location, postcodes) {     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]  # find all matches for the location in the pastcodes dataframe     unique_matches <- unique(matches)      if (length(unique_matches) > 1) {  # only get the mode if there's more than one unique postcode         result <- as.character(GetMostCommon(matches, unique_matches))         #print(paste('check multi results  ', result))         #print(paste('lenght ', length(result)))         #print(paste('nrow   ', nrow(result)))         #print(paste('head   ', head(result)))         #print(paste('str    ', str(result)))     }      else {         if (length(unique_matches) == 1) {  # only one postcode found             result <- as.character(unique_matches[1]) # provisional result, if multiples found, will get most frequent         }         else {  # no postcodes found             result <- 'Not Found'             print(paste('*****************************'))             print(paste('NO RESULT FOR ', location))             print(paste('*****************************'))         }         #print(paste('check single results ', result))         #print(paste('unique[1] ', unique_matches[1]))         #print(paste('lenght ', length(result)))         #print(paste('nrow   ', nrow(result)))         #print(paste('head   ', head(result)))         #print(paste('str    ', str(result)))     }     return (result)  }
#postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv') # load the cleaned postcode dataset
postcode_lookups <- vector(length = 0)
#for (x in 1:nrow(AllNICrimeData)) {
for (x in 1:200) {     search_for <- toupper(AllNICrimeData$Location[x]) # take each location one by one     print(paste('search for ', x, search_for))     if (is.na(search_for) == FALSE){  # exclude NA locations         answer <- as.character(find_a_postcode(search_for, postcodes))         print(paste('adding ', x, answer))         postcode_lookups <- c(postcode_lookups, answer)     }     else {         postcode_lookups <- c(postcode_lookups, NA)     } }
postcode_lookups
#
GetMostCommon <- function(matches, unique_matches) { # get the mode of the matches vector     result <- as.character(unique_matches[which.max(tabulate(match(matches, unique_matches)))])       return (result) }
FindAPoscode <- function(location, postcodes) {     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]  # find all matches for the location in the pastcodes dataframe     unique_matches <- unique(matches)      if (length(unique_matches) > 1) {  # only get the mode if there's more than one unique postcode         result <- as.character(GetMostCommon(matches, unique_matches))     }      else {         if (length(unique_matches) == 1) {  # only one postcode found             result <- as.character(unique_matches[1])          }         else { # no postcodes found for location             result <- 'Not Found'         }     }     return (result)  }
postcode_lookups <- vector(length = 0)
for (x in 1:nrow(AllNICrimeData)) {  # loop through all rows     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations from lookup         answer <- as.character(find_a_postcode(search_for, postcodes))         postcode_lookups <- c(postcode_lookups, answer)  # append new result to existing ones     }     else {         postcode_lookups <- c(postcode_lookups, NA)  # this ensures postcode_lookups has an element for each location row (ie. rows will sync)     } }
GetMostCommon <- function(matches, unique_matches) { # get the mode of the matches vector     result <- as.character(unique_matches[which.max(tabulate(match(matches, unique_matches)))])       return (result) }
FindAPoscode <- function(location, postcodes) {     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]  # find all matches for the location in the pastcodes dataframe     unique_matches <- unique(matches)      if (length(unique_matches) > 1) {  # only get the mode if there's more than one unique postcode         result <- as.character(GetMostCommon(matches, unique_matches))     }      else {         if (length(unique_matches) == 1) {  # only one postcode found             result <- as.character(unique_matches[1])          }         else { # no postcodes found for location             result <- 'Not Found'         }     }     return (result)  }
postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv') # load the cleaned postcode dataset
postcode_lookups <- vector(length = 0)
for (x in 1:nrow(AllNICrimeData)) {  # loop through all rows     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE){  # exclude NA locations from lookup         answer <- as.character(find_a_postcode(search_for, postcodes))         postcode_lookups <- c(postcode_lookups, answer)  # append new result to existing ones     }     else {         postcode_lookups <- c(postcode_lookups, NA)  # this ensures postcode_lookups has an element for each location row (ie. rows will sync)     } }
GetMostCommon <- function(matches, unique_matches) { # get the mode of the matches vector     result <- as.character(unique_matches[which.max(tabulate(match(matches, unique_matches)))])       return (result) }
#d) Lookup postcode ###############################################################################################
GetMostCommon <- function(matches, unique_matches) { # get the mode of the matches vector     result <- as.character(unique_matches[which.max(tabulate(match(matches, unique_matches)))])       return (result) }
FindAPoscode <- function(location, postcodes) {     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]  # find all matches for the location in the pastcodes dataframe     unique_matches <- unique(matches)      if (length(unique_matches) > 1) {  # only get the mode if there's more than one unique postcode         result <- as.character(GetMostCommon(matches, unique_matches))     }      else {         if (length(unique_matches) == 1) {  # only one postcode found             result <- as.character(unique_matches[1])          }         else { # no postcodes found for location             result <- 'Not Found'         }     }     return (result)  }
postcode_lookups <- vector(length = 0)
for (x in 1:nrow(AllNICrimeData)) { # loop through all rows #for (x in 1:10000)) { # loop through 10,000 rows     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE & x < 10000) { # exclude NA locations from lookup         if (x%%100 == 0) {             print(paste('progress if   ', x))         }         answer <- as.character(find_a_postcode(search_for, postcodes))         postcode_lookups <- c(postcode_lookups, answer)  # append new result to existing ones     }     else {         print(paste('progress else   ', x))         postcode_lookups <- c(postcode_lookups, NA)  # this ensures postcode_lookups has an element for each location row (ie. rows will sync)     } }
for (x in 1:nrow(AllNICrimeData)) { # loop through all rows #for (x in 1:10000)) { # loop through 10,000 rows     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE & x < 10000) { # exclude NA locations from lookup         if (x%%100 == 0) {             print(paste('progress if   ', x))         }         answer <- as.character(find_a_postcode(search_for, postcodes))         print(paste('Answer ', answer))         postcode_lookups <- c(postcode_lookups, answer)  # append new result to existing ones     }     else {         print(paste('progress else   ', x))         postcode_lookups <- c(postcode_lookups, NA)  # this ensures postcode_lookups has an element for each location row (ie. rows will sync)     } }
postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv') # load the cleaned postcode dataset
postcode_lookups <- vector(length = 0)
for (x in 1:nrow(AllNICrimeData)) { # loop through all rows #for (x in 1:10000)) { # loop through 10,000 rows     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE & x < 10000) { # exclude NA locations from lookup         if (x%%100 == 0) {             print(paste('progress if   ', x))         }         answer <- as.character(find_a_postcode(search_for, postcodes))         print(paste('Answer ', answer))         postcode_lookups <- c(postcode_lookups, answer)  # append new result to existing ones     }     else {         if (x %% 100 == 0) {             print(paste('progress else   ', x))         }         postcode_lookups <- c(postcode_lookups, NA)  # this ensures postcode_lookups has an element for each location row (ie. rows will sync)     } }
ReadFiles <- function(folder) {     fullpath <- paste(folder, '/', folder, '-northern-ireland-street.csv', sep = '')     new_data <- read.csv(fullpath)     print(paste(folder, nrow(new_data)))     return(new_data) }
#a) ###############################################################################################################
folders <- list.files(path = '.',)
folders
i <- 0
for (x in folders) {     new_data <- ReadFiles(x)     if (i == 0){         AllNICrimeData <- new_data     }     else {         AllNICrimeData <- rbind(AllNICrimeData, new_data)     }     i = i + 1 }
print(paste('Total Number of Rows ', nrow(AllNICrimeData)))
i <- 0
for (x in folders) {     new_data <- ReadFiles(x)     if (i == 0){         AllNICrimeData <- new_data     }     else {         AllNICrimeData <- rbind(AllNICrimeData, new_data)     }     i = i + 1 }
print(paste('Total Number of Rows ', nrow(AllNICrimeData)))
head(AllNICrimeData)
str(AllNICrimeData)
write.csv(AllNICrimeData, file = '2017-12/AllNICrimeData.csv', quote = FALSE, na = " ", row.names = FALSE)
reset
refresh
ReadFiles <- function(folder) {     fullpath <- paste(folder, '/', folder, '-northern-ireland-street.csv', sep = '')     new_data <- read.csv(fullpath)     print(paste(folder, nrow(new_data)))     return(new_data) }
#a) ###############################################################################################################
folders <- list.files(path = '.',)
folders
i <- 0
for (x in folders) {     new_data <- ReadFiles(x)     if (i == 0){         AllNICrimeData <- new_data     }     else {         AllNICrimeData <- rbind(AllNICrimeData, new_data)     }     i = i + 1 }
print(paste('Total Number of Rows ', nrow(AllNICrimeData)))
head(AllNICrimeData)
str(AllNICrimeData)
write.csv(AllNICrimeData, file = '2017-12/AllNICrimeData.csv', quote = FALSE, na = " ", row.names = FALSE)
#b) Remove a number of attributes##################################################################################
AllNICrimeData.bkup.b <- AllNICrimeData
#AllNICrimeDate <- AllNICrimeData.bkup.b
#Remove CrimeID(1), Reported by(3) , Falls within(4), LSOA code(8), LSOA name(9), last outcome(11) and context(12).
drop_cols <- c(1, 3, 4, 8, 9, 11, 12)
AllNICrimeData <- subset(AllNICrimeData, select = -drop_cols)
str(AllNICrimeData)
head(AllNICrimeData)
#(c) Factorise the Crime type attribute. Show the modified structure ##############################################
AllNICrimeData.bkup.c <- AllNICrimeData
#AllNICrimeDate <- AllNICrimeData.bkup.c
attach(AllNICrimeData) # not woring for some reason
AllNICrimeData$Location <- sub('on or near ', '', AllNICrimeData$Location, ignore.case = TRUE)
AllNICrimeData$Location[AllNICrimeData$Location == ''] <- NA
str(AllNICrimeData)
head(AllNICrimeData)
#d) Lookup postcode ###############################################################################################
GetMostCommon <- function(matches, unique_matches) { # get the mode of the matches vector     result <- as.character(unique_matches[which.max(tabulate(match(matches, unique_matches)))])       return (result) }
FindAPoscode <- function(location, postcodes) {     matches <- postcodes$Postcode[postcodes$Primary_Thorfare == location]  # find all matches for the location in the pastcodes dataframe     unique_matches <- unique(matches)      if (length(unique_matches) > 1) {  # only get the mode if there's more than one unique postcode         result <- as.character(GetMostCommon(matches, unique_matches))     }      else {         if (length(unique_matches) == 1) {  # only one postcode found             result <- as.character(unique_matches[1])          }         else { # no postcodes found for location             result <- 'Not Found'         }     }     return (result)  }
postcodes <- read.csv('2017-12/CleanNIPostcodeData.csv') # load the cleaned postcode dataset
postcode_lookups <- vector(length = 0)
for (x in 1:nrow(AllNICrimeData)) { # loop through all rows #for (x in 1:10000)) { # loop through 10,000 rows     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE & x < 10000) { # exclude NA locations from lookup         if (x%%100 == 0) {             print(paste('progress if   ', x))         }         answer <- as.character(find_a_postcode(search_for, postcodes))         print(paste('Answer ', answer))         postcode_lookups <- c(postcode_lookups, answer)  # append new result to existing ones     }     else {         if (x %% 100 == 0) {             print(paste('progress else   ', x))         }         postcode_lookups <- c(postcode_lookups, NA)  # this ensures postcode_lookups has an element for each location row (ie. rows will sync)     } }
postcode_lookups <- vector(length = 0)
for (x in 1:nrow(AllNICrimeData)) { # loop through all rows #for (x in 1:10000)) { # loop through 10,000 rows     search_for <- toupper(AllNICrimeData$Location[x])  # take each location one by one     if (is.na(search_for) == FALSE & x < 10000) { # exclude NA locations from lookup         if (x%%100 == 0) {             print(paste('progress if   ', x))         }         answer <- as.character(find_a_postcode(search_for, postcodes))         #print(paste('Answer ', answer))         postcode_lookups <- c(postcode_lookups, answer)  # append new result to existing ones     }     else {         if (x %% 100 == 0) {             print(paste('progress else   ', x))         }         postcode_lookups <- c(postcode_lookups, NA)  # this ensures postcode_lookups has an element for each location row (ie. rows will sync)     } }
postcodes_df <- data.frame(postcode_lookups) # create data frame from results vector
str(postcodes_df)
head(postcodes_df)
write.csv(postcodes_df, file = '2017-12/postcodes_df.csv', quote = FALSE, na = " ", row.names = FALSE)
head(postcodes_df, 10)
AllNICrimeData.bkup.e <- AllNICrimeData
AllNICrimeData <- cbind(AllNICrimeData, postcodes_df)
head(AllNICrimeData)
str(AllNICrimeData)
head(AllNICrimeData, 10)
tail(AllNICrimeData, 10)
for (i in 1:100) {     if (AllNICrimeData$Postcode[i] = 'Not Found') {         print(paste('found ', AllNICrimeData$Postcode[i]))         lon <-AllNICrimeData$Longitude[i]         lat <- AllNICrimeData$Latitude[i]         precision <- 6          found <- FALSE         while (found = FALSE & precision > 1) {             similar <- as.character(AllNICrimeData$Location[which(AllNICrimeData$Latitude == lat & AllNICrimeData$Longitude = lon)])             if (length(similar) > 0) {                 found <- TRUE                 print(paste('similar'))                 print(paste(similar))             }             else {                 precision <- precision - 1                 lon <- round(lon, digits = precision)                 lat <- round(lat, digits = precision)             }         }         if (found = TRUE) {         }     } }
for (i in 1:100) {     if (is.na(AllNICrimeData$Location[i]) {         print(paste('found ', AllNICrimeData$Postcode[i]))         lon <-AllNICrimeData$Longitude[i]         lat <- AllNICrimeData$Latitude[i] #        precision <- 6  #        found <- FALSE #        while (found = FALSE & precision > 1) { #            similar <- as.character(AllNICrimeData$Location[which(AllNICrimeData$Latitude == lat & AllNICrimeData$Longitude = lon)]) #            if (length(similar) > 0) { #                found <- TRUE #                print(paste('similar')) #                print(paste(similar)) #            } #            else { #                precision <- precision - 1 #                lon <- round(lon, digits = precision) #                lat <- round(lat, digits = precision) #            } # #        } #        if (found = TRUE) { # #        }     } }
for (i in 1:100) {     if (is.na(AllNICrimeData$Location[i]){         print(paste('found ', AllNICrimeData$Postcode[i]))         lon <- AllNICrimeData$Longitude[i]         lat <- AllNICrimeData$Latitude[i]     } }
for (i in 1:100) {     if (is.na(AllNICrimeData$Location[i])){         print(paste('found ', AllNICrimeData$Postcode[i]))         lon <- AllNICrimeData$Longitude[i]         lat <- AllNICrimeData$Latitude[i]     } }
for (i in 1:100) {     if (is.na(AllNICrimeData$Location[i])){         print(paste('found ', AllNICrimeData$Location[i]), AllNICrimeData$Latitude[i]))         lon <- AllNICrimeData$Longitude[i]         lat <- AllNICrimeData$Latitude[i]     } }
for (i in 1:100) {     if (is.na(AllNICrimeData$Location[i])){         print(paste('found ', AllNICrimeData$Location[i], AllNICrimeData$Latitude[i]))         lon <- AllNICrimeData$Longitude[i]         lat <- AllNICrimeData$Latitude[i]     } }
for (i in 1:100) {     if (is.na(AllNICrimeData$Location[i])){         print(paste('found ', AllNICrimeData$Location[i], AllNICrimeData$Latitude[i]))         lon <- AllNICrimeData$Longitude[i]         lat <- AllNICrimeData$Latitude[i]         print(paste('lon ', lon, class(lon)))         print(paste('lat ', lat, class(lat)))     } }
for (i in 1:100) {     if (is.na(AllNICrimeData$Location[i])){         print(paste('found ', AllNICrimeData$Location[i], AllNICrimeData$Latitude[i]))         lon <- AllNICrimeData$Longitude[i]         lat <- AllNICrimeData$Latitude[i]         print(paste('lon ', lon, class(lon)))         print(paste('lat ', lat, class(lat)))         precision <- 6          found <- FALSE         while (found = FALSE & precision > 1) {         similar <- as.character(AllNICrimeData$Location[which(AllNICrimeData$Latitude == lat & AllNICrimeData$Longitude = lon)])         if (length(similar) > 0) {             found <- TRUE             print(paste('similar'))             print(paste(similar))         }         else {             precision <- precision - 1             lon <- round(lon, digits = precision)             lat <- round(lat, digits = precision)             print(paste('new lon ', lon, class(lon)))             print(paste('new lat ', lat, class(lat)))         }         }     } }
for (i in 1:100) {     if (is.na(AllNICrimeData$Location[i])){         print(paste('found ', AllNICrimeData$Location[i], AllNICrimeData$Latitude[i]))         lon <- AllNICrimeData$Longitude[i]         lat <- AllNICrimeData$Latitude[i]         print(paste('lon ', lon, class(lon)))         print(paste('lat ', lat, class(lat)))         precision <- 6          found <- FALSE         while (found = FALSE) {             print(i)             found <- FALSE         }         while (found = FALSE & precision > 1) {         similar <- as.character(AllNICrimeData$Location[which(AllNICrimeData$Latitude == lat & AllNICrimeData$Longitude = lon)])         if (length(similar) > 0) {             found <- TRUE             print(paste('similar'))             print(paste(similar))         }         else {             precision <- precision - 1             lon <- round(lon, digits = precision)             lat <- round(lat, digits = precision)             print(paste('new lon ', lon, class(lon)))             print(paste('new lat ', lat, class(lat)))         }         }     } }
for (i in 1:100) {     if (is.na(AllNICrimeData$Location[i])){         print(paste('found ', AllNICrimeData$Location[i], AllNICrimeData$Latitude[i]))         lon <- AllNICrimeData$Longitude[i]         lat <- AllNICrimeData$Latitude[i]         print(paste('lon ', lon, class(lon)))         print(paste('lat ', lat, class(lat)))         precision <- 6          found <- FALSE         while (isFALSE(found)) {             print(i)             found <- TRUE         }         while (found = FALSE & precision > 1) {         similar <- as.character(AllNICrimeData$Location[which(AllNICrimeData$Latitude == lat & AllNICrimeData$Longitude = lon)])         if (length(similar) > 0) {             found <- TRUE             print(paste('similar'))             print(paste(similar))         }         else {             precision <- precision - 1             lon <- round(lon, digits = precision)             lat <- round(lat, digits = precision)             print(paste('new lon ', lon, class(lon)))             print(paste('new lat ', lat, class(lat)))         }         }     } }
for (i in 1:100) {     if (is.na(AllNICrimeData$Location[i])){         print(paste('found ', AllNICrimeData$Location[i], AllNICrimeData$Latitude[i]))         lon <- AllNICrimeData$Longitude[i]         lat <- AllNICrimeData$Latitude[i]         print(paste('lon ', lon, class(lon)))         print(paste('lat ', lat, class(lat)))         precision <- 6          found <- FALSE         while (isFALSE(found)) {             print(i)             found <- TRUE         }         while (isFALSE(found) & precision > 1) {         similar <- as.character(AllNICrimeData$Location[which(AllNICrimeData$Latitude == lat & AllNICrimeData$Longitude = lon)])         if (length(similar) > 0) {             found <- TRUE             print(paste('similar'))             print(paste(similar))         }         else {             precision <- precision - 1             lon <- round(lon, digits = precision)             lat <- round(lat, digits = precision)             print(paste('new lon ', lon, class(lon)))             print(paste('new lat ', lat, class(lat)))         }         }     } }
#        precision <- 6 
for (i in 1:100) {     if (is.na(AllNICrimeData$Location[i])){         print(paste('found ', AllNICrimeData$Location[i], AllNICrimeData$Latitude[i]))         lon <- AllNICrimeData$Longitude[i]         lat <- AllNICrimeData$Latitude[i]         print(paste('lon ', lon, class(lon)))         print(paste('lat ', lat, class(lat)))         precision <- 6          found <- FALSE         while (isFALSE(found)) {             print(paste('forst while ', i))             found <- TRUE         }         while (isFALSE(found) & precision > 1) {         similar <- as.character(AllNICrimeData$Location[which(AllNICrimeData$Latitude == lat & AllNICrimeData$Longitude = lon)])         if (length(similar) > 0) {             found <- TRUE             print(paste('similar'))             print(paste(similar))         }         else {             precision <- precision - 1             lon <- round(lon, digits = precision)             lat <- round(lat, digits = precision)             print(paste('new lon ', lon, class(lon)))             print(paste('new lat ', lat, class(lat)))         }         }     } }
#        precision <- 6 
#        found <- FALSE
#        while (found = FALSE & precision > 1) {
#            similar <- as.character(AllNICrimeData$Location[which(AllNICrimeData$Latitude == lat & AllNICrimeData$Longitude = lon)])
for (i in 1:100) {     if (is.na(AllNICrimeData$Location[i])){         print(paste('found ', AllNICrimeData$Location[i], AllNICrimeData$Latitude[i]))         lon <- AllNICrimeData$Longitude[i]         lat <- AllNICrimeData$Latitude[i]         print(paste('lon ', lon, class(lon)))         print(paste('lat ', lat, class(lat)))         precision <- 6          found <- FALSE         while (!isTRUE(found)) {             print(paste('forst while ', i))             found <- TRUE         }         while (isFALSE(found) & precision > 1) {             similar <- as.character(AllNICrimeData$Location[which(AllNICrimeData$Latitude == lat & AllNICrimeData$Longitude = lon)])             if (length(similar) > 0) {                 found <- TRUE                 print(paste('similar'))                 print(paste(similar))             }             else {                 precision <- precision - 1                 lon <- round(lon, digits = precision)                 lat <- round(lat, digits = precision)                 print(paste('new lon ', lon, class(lon)))                 print(paste('new lat ', lat, class(lat)))             }         }     } }
for (i in 1:100) {1     if (is.na(AllNICrimeData$Location[i])){         print(paste('found ', AllNICrimeData$Location[i], AllNICrimeData$Latitude[i]))         lon <- AllNICrimeData$Longitude[i]         lat <- AllNICrimeData$Latitude[i]         print(paste('lon ', lon, class(lon)))         print(paste('lat ', lat, class(lat)))         precision <- 6          found <- FALSE         if (found > 0) {             print(paste('found > 0 , found'))         }         else {             print(paste('found not > 0 , found'))         }         while (!isTRUE(found)) {             print(paste('forst while ', i))             found <- TRUE         }         while (isFALSE(found) & precision > 1) {             similar <- as.character(AllNICrimeData$Location[which(AllNICrimeData$Latitude == lat & AllNICrimeData$Longitude = lon)])             if (length(similar) > 0) {                 found <- TRUE                 print(paste('similar'))                 print(paste(similar))             }             else {                 precision <- precision - 1                 lon <- round(lon, digits = precision)                 lat <- round(lat, digits = precision)                 print(paste('new lon ', lon, class(lon)))                 print(paste('new lat ', lat, class(lat)))             }         }     } }
#        precision <- 6 
for (i in 1:100) {1     if (is.na(AllNICrimeData$Location[i])){         print(paste('found ', AllNICrimeData$Location[i], AllNICrimeData$Latitude[i]))         lon <- AllNICrimeData$Longitude[i]         lat <- AllNICrimeData$Latitude[i]         print(paste('lon ', lon, class(lon)))         print(paste('lat ', lat, class(lat)))         precision <- 6          found <- FALSE         if (found > 0) {             print(paste('found > 0 , found'))         }         else {             print(paste('found not > 0 , found'))         }         while (!isTRUE(found)) {             print(paste('forst while ', i))             found <- TRUE         }         while (!isTRUE(found) & precision > 1) {             similar <- as.character(AllNICrimeData$Location[which(AllNICrimeData$Latitude == lat & AllNICrimeData$Longitude = lon)])             if (length(similar) > 0) {                 found <- TRUE                 print(paste('similar'))                 print(paste(similar))             }             else {                 precision <- precision - 1                 lon <- round(lon, digits = precision)                 lat <- round(lat, digits = precision)                 print(paste('new lon ', lon, class(lon)))                 print(paste('new lat ', lat, class(lat)))             }         }     } }
#        precision <- 6 
for (i in 1:100) {1     if (is.na(AllNICrimeData$Location[i])){         print(paste('found ', AllNICrimeData$Location[i], AllNICrimeData$Latitude[i]))         lon <- AllNICrimeData$Longitude[i]         lat <- AllNICrimeData$Latitude[i]         print(paste('lon ', lon, class(lon)))         print(paste('lat ', lat, class(lat)))         precision <- 6          found <- FALSE         if (found > 0) {             print(paste('found > 0 , found'))         }         else {             print(paste('found not > 0 , found'))         }         while (!isTRUE(found)) {             print(paste('forst while ', i))             found <- TRUE         }         while (!isTRUE(found) & precision > 1) {             similar <- as.character(AllNICrimeData$Location[which(AllNICrimeData$Latitude == lat & AllNICrimeData$Longitude == lon)])             if (length(similar) > 0) {                 found <- TRUE                 print(paste('similar'))                 print(paste(similar))             }             else {                 precision <- precision - 1                 lon <- round(lon, digits = precision)                 lat <- round(lat, digits = precision)                 print(paste('new lon ', lon, class(lon)))                 print(paste('new lat ', lat, class(lat)))             }         }     } }
#        precision <- 6 
#        found <- FALSE
#        while (found = FALSE & precision > 1) {
#            similar <- as.character(AllNICrimeData$Location[which(AllNICrimeData$Latitude == lat & AllNICrimeData$Longitude = lon)])
#            if (length(similar) > 0) {
#                found <- TRUE
for (i in 1:100) {1     if (is.na(AllNICrimeData$Location[i])){         print(paste('found ', AllNICrimeData$Location[i], AllNICrimeData$Latitude[i]))         lon <- AllNICrimeData$Longitude[i]         lat <- AllNICrimeData$Latitude[i]         print(paste('lon ', lon, class(lon)))         print(paste('lat ', lat, class(lat)))         precision <- 6          found <- FALSE         while (!isTRUE(found)) {             print(paste('forst while ', i))             found <- TRUE         }         while (!isTRUE(found) & precision > 1) {             similar <- as.character(AllNICrimeData$Location[which(AllNICrimeData$Latitude == lat & AllNICrimeData$Longitude == lon)])             if (length(similar) > 0) {                 found <- TRUE                 print(paste('similar'))                 print(paste(similar))             }             else {                 precision <- precision - 1                 lon <- round(lon, digits = precision)                 lat <- round(lat, digits = precision)                 print(paste('new lon ', lon, class(lon)))                 print(paste('new lat ', lat, class(lat)))             }         }     } }
#        precision <- 6 
#        found <- FALSE
#        while (found = FALSE & precision > 1) {
for (i in 1:100) {1     if (is.na(AllNICrimeData$Location[i])){         print(paste('found ', AllNICrimeData$Location[i], AllNICrimeData$Latitude[i]))         lon <- AllNICrimeData$Longitude[i]         lat <- AllNICrimeData$Latitude[i]         print(paste('lon ', lon, class(lon)))         print(paste('lat ', lat, class(lat)))         precision <- 6          found <- FALSE         while (!isTRUE(found) & precision > 1) {             similar <- as.character(AllNICrimeData$Location[which(AllNICrimeData$Latitude == lat & AllNICrimeData$Longitude == lon)])             if (length(similar) > 0) {                 found <- TRUE                 print(paste('similar'))                 print(paste(similar))             }             else {                 precision <- precision - 1                 lon <- round(lon, digits = precision)                 lat <- round(lat, digits = precision)                 print(paste('new lon ', lon, class(lon)))                 print(paste('new lat ', lat, class(lat)))             }         }     } }
#        precision <- 6 
for (i in 1:100) {1     if (is.na(AllNICrimeData$Location[i])){         print(paste('found ', AllNICrimeData$Location[i], AllNICrimeData$Latitude[i]))         lon <- AllNICrimeData$Longitude[i]         lat <- AllNICrimeData$Latitude[i]         print(paste('lon ', lon, class(lon)))         print(paste('lat ', lat, class(lat)))         precision <- 6          found <- FALSE         while (!isTRUE(found) & precision > 1) {             similar <- as.character(AllNICrimeData$Location[which(!is.na(AllNICrimeData$Location) & AllNICrimeData$Latitude == lat & AllNICrimeData$Longitude == lon)])             if (length(similar) > 0) {                 found <- TRUE                 print(paste('similar'))                 print(paste(similar))             }             else {                 precision <- precision - 1                 lon <- round(lon, digits = precision)                 lat <- round(lat, digits = precision)                 print(paste('new lon ', lon, class(lon)))                 print(paste('new lat ', lat, class(lat)))             }         }     } }
#        precision <- 6 
#        found <- FALSE
#f) Approximate Location ###############################################################################################
for (i in 1:100) {1     if (is.na(AllNICrimeData$Location[i])){         print(paste('found ', AllNICrimeData$Location[i], AllNICrimeData$Latitude[i]))         lon <- AllNICrimeData$Longitude[i]         lat <- AllNICrimeData$Latitude[i]         print(paste('lon ', lon, class(lon)))         print(paste('lat ', lat, class(lat)))         precision <- 6          found <- FALSE         while (!isTRUE(found) & precision > 1) {             similar <- as.character(AllNICrimeData$Location[which(!is.na(AllNICrimeData$Location) & round(AllNICrimeData$Latitude, digits = precision) == lat & round(AllNICrimeData$Longitude, digits = precision) == lon)])             if (length(similar) > 0) {                 found <- TRUE                 print(paste('similar'))                 print(paste(similar))             }             else {                 precision <- precision - 1                 lon <- round(lon, digits = precision)                 lat <- round(lat, digits = precision)                 print(paste('new lon ', lon, class(lon)))                 print(paste('new lat ', lat, class(lat)))             }         }     } }
        x <- 123.456
        trunc(x, 2)
        x <- 123.45645345
        trunc(x, 5)
        x <- 123.45645345
        trunc(x, -5)
        floor(x, 5)
        floor(x)
        x <- 123.45645345
        trunc(x*10^4)/(10^4)
for (i in 1:100) {     if (is.na(AllNICrimeData$Location[i])){         print(paste('found ', AllNICrimeData$Location[i], AllNICrimeData$Latitude[i]))         lon <- AllNICrimeData$Longitude[i]         lat <- AllNICrimeData$Latitude[i]         print(paste('lon ', lon, class(lon)))         print(paste('lat ', lat, class(lat)))         precision <- 6          found <- FALSE         x <- 123.45645345         trunc(x*10^4)/(10^4)         while (!isTRUE(found) & precision > 1) {             similar <- as.character(AllNICrimeData$Location[which(!is.na(AllNICrimeData$Location) &                                                                          (trunc(AllNICrimeData$Latitude * 10 ^ precision) / (10 ^ precision)) == lat &                                                                          (trunc(AllNICrimeData$Longitude * 10 ^ precision) / (10 ^ precision)) == lon)])             if (length(similar) > 0) {                 found <- TRUE                 print(paste('similar'))                 print(paste(similar))             }             else {                 precision <- precision - 1                 lon <- round(lon, digits = precision)                 lat <- round(lat, digits = precision)                 print(paste('new lon ', lon, class(lon)))                 print(paste('new lat ', lat, class(lat)))             }         }     } }
for (i in 1:100) {     if (is.na(AllNICrimeData$Location[i])){         print(paste('found ', AllNICrimeData$Location[i], AllNICrimeData$Latitude[i]))         lon <- AllNICrimeData$Longitude[i]         lat <- AllNICrimeData$Latitude[i]         print(paste('lon ', lon, class(lon)))         print(paste('lat ', lat, class(lat)))         precision <- 6          found <- FALSE         x <- 123.45645345         trunc(x*10^4)/(10^4)         while (!isTRUE(found) & precision > 1) {             similar <- as.character(AllNICrimeData$Location[which(!is.na(AllNICrimeData$Location) &                                                                          (trunc(AllNICrimeData$Latitude * 10 ^ precision) / (10 ^ precision)) == lat &                                                                          (trunc(AllNICrimeData$Longitude * 10 ^ precision) / (10 ^ precision)) == lon)])             if (length(similar) > 0) {                 found <- TRUE                 print(paste('similar'))                 print(paste(similar))             }             else {                 precision <- precision - 1                 lon <- (trunc(lon*10^precision))/(10^precision)                 lat <- (trunc(lat*10^precision))/(10^precision)                 print(paste('new lon ', lon, class(lon)))                 print(paste('new lat ', lat, class(lat)))             }         }     } }
#        precision <- 6 
#        found <- FALSE
#        while (found = FALSE & precision > 1) {
#            similar <- as.character(AllNICrimeData$Location[which(AllNICrimeData$Latitude == lat & AllNICrimeData$Longitude = lon)])
for (i in 1:100) {     if (is.na(AllNICrimeData$Location[i])){         print(paste('found ', AllNICrimeData$Location[i], AllNICrimeData$Latitude[i]))         lon <- AllNICrimeData$Longitude[i]         lat <- AllNICrimeData$Latitude[i]         print(paste('lon ', lon, class(lon)))         print(paste('lat ', lat, class(lat)))         precision <- 6          found <- FALSE         x <- 123.45645345         trunc(x*10^4)/(10^4)         while (!isTRUE(found) & precision > 1) {             similar <- as.character(AllNICrimeData$Location[which(!is.na(AllNICrimeData$Location) &                                                                          (trunc(AllNICrimeData$Latitude * 10 ^ precision) / (10 ^ precision)) == lat &                                                                          (trunc(AllNICrimeData$Longitude * 10 ^ precision) / (10 ^ precision)) == lon)])             if (length(similar) > 0) {                 found <- TRUE                 print(paste('similar'))                 print(paste(similar))             }             else {                 precision <- precision - 1                 lon <- (trunc(lon*10^precision))/(10^precision)                 lat <- (trunc(lat*10^precision))/(10^precision)                 print(paste('new lon ', lon, class(lon)))                 print(paste('new lat ', lat, class(lat)))             }         }     } }
for (i in 1:100) {     if (is.na(AllNICrimeData$Location[i])){         print(paste('found ', AllNICrimeData$Location[i], AllNICrimeData$Latitude[i]))         lon <- AllNICrimeData$Longitude[i]         lat <- AllNICrimeData$Latitude[i]         print(paste('lon ', lon, class(lon)))         print(paste('lat ', lat, class(lat)))         precision <- 6          found <- FALSE         x <- 123.45645345         trunc(x*10^4)/(10^4)         while (!isTRUE(found) & precision > 1) {             similar <- as.character(AllNICrimeData$Location[which(!is.na(AllNICrimeData$Location) &                                                                          (trunc(AllNICrimeData$Latitude * 10 ^ precision) / (10 ^ precision)) == lat &                                                                          (trunc(AllNICrimeData$Longitude * 10 ^ precision) / (10 ^ precision)) == lon)])             if (length(similar) > 0) {                 found <- TRUE                 print(paste('similar 1 ', similar[1]))                 print(paste(similar))             }             else {                 precision <- precision - 1                 lon <- (trunc(lon*10^precision))/(10^precision)                 lat <- (trunc(lat*10^precision))/(10^precision)                 print(paste('new lon ', lon, class(lon)))                 print(paste('new lat ', lat, class(lat)))             }         }     } }
#f) Approximate Location ###############################################################################################
for (i in 1:100) {     if (is.na(AllNICrimeData$Location[i])){         print(paste('found ', AllNICrimeData$Location[i], AllNICrimeData$Latitude[i]))         lon <- AllNICrimeData$Longitude[i]         lat <- AllNICrimeData$Latitude[i]         print(paste('lon ', lon, class(lon)))         print(paste('lat ', lat, class(lat)))         precision <- 6          found <- FALSE         x <- 123.45645345         trunc(x*10^4)/(10^4)         while (!isTRUE(found) & precision > 1) {             similar <- as.character(AllNICrimeData$Location[which(!is.na(AllNICrimeData$Location) &                                                                          (trunc(AllNICrimeData$Latitude * 10 ^ precision) / (10 ^ precision)) == lat &                                                                          (trunc(AllNICrimeData$Longitude * 10 ^ precision) / (10 ^ precision)) == lon)])             if (length(similar) > 0) {                 found <- TRUE                 print(paste('similar 1 ', similar[1]))                 #print(paste(similar))                 AllNICrimeData$Location[i] <- similar[1]                 print(paste('new ', AllNICrimeData$Location[i]))             }             else {                 precision <- precision - 1                 lon <- (trunc(lon*10^precision))/(10^precision)                 lat <- (trunc(lat*10^precision))/(10^precision)                 print(paste('new lon ', lon, class(lon)))                 print(paste('new lat ', lat, class(lat)))             }         }     } }
head(AllNICrimeData)
head(AllNICrimeData, 10)
TidyLocation <- function(lat, lon, precision) {     similar <- as.character(AllNICrimeData$Location[which(!is.na(AllNICrimeData$Location) &                                                    (trunc(AllNICrimeData$Latitude * 10 ^ precision) / (10 ^ precision)) == lat & #  drop the lsd                                                    (trunc(AllNICrimeData$Longitude * 10 ^ precision) / (10 ^ precision)) == lon)])     return (similar) }
for (i in 1:10000) {                            # limit to the first 10,000     if (is.na(AllNICrimeData$Location[i])){     # only interested in missing values         lon <- AllNICrimeData$Longitude[i]      # initial search values are the originals         lat <- AllNICrimeData$Latitude[i]         precision <- 6                          # after each unsuccessful test the precision will be reduced by 1 (least significant digit (lsd) removed)         found <- FALSE         while (!isTRUE(found) & precision > 1) {  # keep going until a match is found or the precision is so poor the result is meaningless             #similar <- as.character(AllNICrimeData$Location[which(!is.na(AllNICrimeData$Location) &             #                                                             (trunc(AllNICrimeData$Latitude * 10 ^ precision) / (10 ^ precision)) == lat &   #  drop the lsd             #                                                             (trunc(AllNICrimeData$Longitude * 10 ^ precision) / (10 ^ precision)) == lon)])             similar <- TidyLocation(lat, lon, precision)             if (length(similar) > 0) {  # if at least one was found                 found <- TRUE  # stop the loop                 AllNICrimeData$Location[i] <- similar[1]  # just using the first match found to value the new location             }             else {                 precision <- precision - 1                       # reduce the precision for the next pass                 lon <- (trunc(lon*10^precision))/(10^precision)  # drop the lsd                 lat <- (trunc(lat*10^precision))/(10^precision)             }         }     } }
#f) Approximate Location ###############################################################################################
TidyLocation <- function(lat, lon, precision) {     print(paste('TidyLocation'))     similar <- as.character(AllNICrimeData$Location[which(!is.na(AllNICrimeData$Location) &                                                   (trunc(AllNICrimeData$Latitude * 10 ^ precision) / (10 ^ precision)) == lat & #  drop the lsd                                                    (trunc(AllNICrimeData$Longitude * 10 ^ precision) / (10 ^ precision)) == lon)])     return (similar) }
for (i in 1:10000) {                            # limit to the first 10,000     if (is.na(AllNICrimeData$Location[i])){     # only interested in missing values         lon <- AllNICrimeData$Longitude[i]      # initial search values are the originals         lat <- AllNICrimeData$Latitude[i]         precision <- 6                          # after each unsuccessful test the precision will be reduced by 1 (least significant digit (lsd) removed)         found <- FALSE         while (!isTRUE(found) & precision > 1) {  # keep going until a match is found or the precision is so poor the result is meaningless             #similar <- as.character(AllNICrimeData$Location[which(!is.na(AllNICrimeData$Location) &             #                                                             (trunc(AllNICrimeData$Latitude * 10 ^ precision) / (10 ^ precision)) == lat &   #  drop the lsd             #                                                             (trunc(AllNICrimeData$Longitude * 10 ^ precision) / (10 ^ precision)) == lon)])             print(paste('Calling ', lat, lon, precision))             similar <- TidyLocation(lat, lon, precision)             if (length(similar) > 0) {  # if at least one was found                 found <- TRUE  # stop the loop                 AllNICrimeData$Location[i] <- similar[1]  # just using the first match found to value the new location             }             else {                 precision <- precision - 1                       # reduce the precision for the next pass                 lon <- (trunc(lon*10^precision))/(10^precision)  # drop the lsd                 lat <- (trunc(lat*10^precision))/(10^precision)             }         }     } }
head(AllNICrimeData, 10)
str(AllNICrimeData)
write.csv(postcodes_df, file = '2017-12/FinalNICrimeData.csv', quote = FALSE, na = " ", row.names = FALSE)
n <- 123456
trunc(123456)
n <- 123456
trunc(n)
n <- 123456.6
trunc(n)
strabane <- subset(AllNICrimeData$postcode_lookups, AllNICrimeData$postcode_lookups == "BT82*"))
strabane
strabane <- subset(AllNICrimeData$postcode_lookups, AllNICrimeData$postcode_lookups == "BT82*")
strabane
strabane <- subset(AllNICrimeData, AllNICrimeData$postcode_lookups == "BT82*")
head(strabane,10)
strabane <- subset(AllNICrimeData, AllNICrimeData$postcode_lookups = "BT82*")
head(strabane,10)
strabane <- subset(AllNICrimeData, AllNICrimeData$postcode_lookups = "BT*")
head(strabane,10)
head(AllNICrimeData, 10)
sub('BT', '', AllNICrimeData$Location, ignore.case = TRUE)
sub('BT82', '', AllNICrimeData$Location, ignore.case = TRUE)
newd <- sub('BT82', '', AllNICrimeData$Location, ignore.case = TRUE)
head(news, 20)
newd <- sub('BT82', '', AllNICrimeData$Location, ignore.case = TRUE)
head(news, 20)
head(news, 20)
strabane_data <- AllNICrimeData[grep("bt82", ignore.case = TRUE, AllNICrimeData$postcode_lookups),]
head(strabane_data, 10)
strabane_data <- AllNICrimeData[grep("bt82", ignore.case = TRUE, AllNICrimeData$postcode_lookups) | "Koram", ignore.case = TRUE, AllNICrimeData$Location, ]
head(strabane_data, 10)
strabane_data <- AllNICrimeData[grep("bt82", AllNICrimeData$postcode_lookups) | "Koram", ignore.case = TRUE, AllNICrimeData$Location, ]
strabane_data <- AllNICrimeData[grep("bt82", AllNICrimeData$postcode_lookups) || "Koram", ignore.case = TRUE, AllNICrimeData$Location, ]
strabane_data <- AllNICrimeData[grep("bt82", AllNICrimeData$postcode_lookups) || "Koram", AllNICrimeData$Location, ]
strabane_data <- with(AllNICrimeData, AllNICrimeData[grepl('BT82', postcode_lookups) | grepl('Koram', Location),])
head(strabane_data, 10)
head(AllNICrimeData, 10)
strabane_data <- with(AllNICrimeData, AllNICrimeData[grepl('BT82', postcode_lookups) | grepl('Place', Location),])
head(strabane_data, 10)
strabane_data <- with(AllNICrimeData, AllNICrimeData[grepl('BT82', postcode_lookups) | grepl('place', Location),])
head(strabane_data, 10)
strabane_data <- with(AllNICrimeData, AllNICrimeData[grepl('bt82', postcode_lookups, ignore.case = TRUE) | grepl('place', Location, ignore.case = TRUE),])
head(strabane_data, 10)
str(strabane_data)
