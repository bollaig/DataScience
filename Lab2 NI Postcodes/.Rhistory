my_data = read.csv("C:/Users/user/Documents/Msc/Data Science/Files/NIPostcodes.csv")
head(my_data)
head(my_data)
cols <- c("house_number", "add1", "add2", "add3", "add4", "postcode", "num1", "num2")
colnames(my_data, cols)
colnames(my_data) <- cols
head(my_data)
cols <- c("", "", "", "house_number", "add1", "add2", "add3", "add4", "postcode", "num1", "num2")
colnames(my_data) <- cols
head(my_data)
str(my_data)
my_data = read.csv("C:/Users/user/Documents/Msc/Data Science/Files/NIPostcodes.csv")cols <- c("", "", "", "house_number", "add1", "", "", "add2", "add3", "add4", "postcode", "num1", "num2")
colnames(my_data) <- cols
cols <- c("", "", "", "house_number", "add1", "", "", "add2", "add3", "add4", "postcode", "num1", "num2")
colnames(my_data) <- cols
head(my_data)
cols <- c("", "", "", "house_number", "add1", "", "", "", "add2", "add3", "add4", "postcode", "num1", "num2")
colnames(my_data) <- cols
head(my_data)
cols <- c("", "", "", "house_number", "add1", "", "", "", "add2", "add3", "add4", "postcode", "num1", "num2", "num3")
colnames(my_data) <- cols
head(my_data)
str(my_data)
head(my_data, 10)
head(my_data, 70)
postcodes <- data.frame(my_data[, c("postcode")])
class(postcodes)
str(postcodes)
head(postcodes, 100)
length(postcodes)
length(postcodes[1])
my_data = read.csv("C:/Users/user/Documents/Msc/Data Science/Files/NIPostcodes.csv")
head(my_data)
cols <- c("Organisation_Name", "Sub-building_Name", "Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare", "Locality", "Townland", "Town", "County", "Postcode", x-coordinates", y-coordinates", "Primary_Key")
colnames(my_data) <- cols
# Show the structure and first 10 rows of the dataframe containing all of the NIPostcode data.
str(my_data)
head(my_data, 10)
# Show the total number and mean missing values of the NIPostcode data.
missing_vals <- sum(is.na(my_data))
missing_vals
blank_vals <- sum(is.blank(my_data))
# Show the total number and mean missing values of the NIPostcode data.
blank_vals <- sum(is.blank(my_data))
blank_vals
empty_vals <- sum(is.empty(my_data))
empty_vals
null_vals <- sum(is.null(my_data))
nrow(my_data)
nrow(na.omit(my_data))
# Add a suitable title to each attribute of the data.
cols <- c("Organisation_Name", "Sub-building_Name", "Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare", "Locality", "Townland", "Town", "County", "Postcode", x-coordinates", y-coordinates", "Primary_Key")
cols <- c("Organisation_Name", "Sub-building_Name", "Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare", "Locality", "Townland", "Town", "County", "Postcode", "x-coordinates", "y-coordinates", "Primary_Key")
colnames(my_data) <- cols
head(my_data, 10)
# Modify the County attribute to a categorising factor.
attach(my_data)
counties <- c("Antrim", "Armagh", "Derry", "Down", "Fermanagh", "Tyrone" )
categorised_county <- factor(County, levels = county_order)
categorised_county <- factor(County, levels = counties)
County <- categorised_county
str(my_data)
str(my_data)
my_data = read.csv("C:/Users/user/Documents/Msc/Data Science/Files/NIPostcodes.csv")
# Show the structure and first 10 rows of the dataframe containing all of the NIPostcode data.
str(my_data)
head(my_data, 10)
# Show the total number and mean missing values of the NIPostcode data.
missing_vals <- sum(is.na(my_data))
missing_vals
nrow(my_data)
nrow(na.omit(my_data))
# Remove or replace missing entries with a suitable identifier. Decide whether it is best to remove missing data or to recode it.
# Add a suitable title to each attribute of the data.
cols <- c("Organisation_Name", "Sub-building_Name", "Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare", "Locality", "Townland", "Town", "County", "Postcode", "x-coordinates", "y-coordinates", "Primary_Key")
colnames(my_data) <- cols
head(my_data, 10)
str(my_data)
attach(my_data)
counties <- c("Antrim", "Armagh", "Derry", "Down", "Fermanagh", "Tyrone" )
categorised_county <- factor(County, levels = counties)
County <- categorised_county
str(my_data)
head(my_data, 10)limavady_data <- data.frame(my_data[Town == "LIMAVADY",])
limavady_data <- data.frame(my_data[Town == "LIMAVADY",])
limavady_data
head(limavady_data, 10)
#--Read CSV------------------------------------------------------------------------
my_data = read.csv("C:/Users/user/Documents/Msc/Data Science/Files/NIPostcodes.csv")
# Show the structure and first 10 rows of the dataframe containing all of the NIPostcode data.
str(my_data)
head(my_data, 10)
# Show the total number and mean missing values of the NIPostcode data.
missing_vals <- sum(is.na(my_data))
missing_vals
complete_data <- complete.cases(my_data)
#complete_data
# Show sum of missing rows
sum(complete_data)
nrow(my_data)
# Show the total number and mean missing values of the NIPostcode data.
my_data[my_data == ""] <- NA
missing_vals <- sum(is.na(my_data))
missing_vals
rowSums(is.na(my_data))
rowSum <- rowSums(is.na(my_data))
class(rowSum)
str(rowSum)
mean(rowSum)
sum(complete_data)
rowSum <- rowSums(is.na(my_data))
class(rowSum)
str(rowSum)
mean(rowSum)
sum(rowSum)
my_data[my_data == ""] <- NA        # replace blanks with NA
missing_vals <- sum(is.na(my_data))
missing_vals
mean(rowSums(is.na(my_data)))
missing_vals
mean(rowSums(is.na(my_data)))
missing_vals <- sum(is.na(my_data))
attach(my_data)
my_data <- my_data[is.na(postcode), ]
head(my_date[ ,12],10)
head(my_data[ ,12],10)
missing_vals <- sum(is.na(my_data))
attach(my_data)
my_data <- my_data[is.na(12), ]
missing_vals <- sum(is.na(my_data))
# Add a suitable title to each attribute of the data.
#--Read CSV------------------------------------------------------------------------
my_data = read.csv("C:/Users/user/Documents/Msc/Data Science/Files/NIPostcodes.csv")
# Show the structure and first 10 rows of the dataframe containing all of the NIPostcode data.
str(my_data)
head(my_data, 10)
# Show the total number and mean missing values of the NIPostcode data.
my_data[my_data == ""] <- NA        # replace blanks with NA
missing_vals <- sum(is.na(my_data))
missing_vals
#complete_data <- complete.cases(my_data)
#complete_data
# Show sum of missing rows
#sum(complete_data)
rowSum <- rowSums(is.na(my_data))
class(rowSum)
str(rowSum)
mean(rowSum)
sum(rowSum)
mean(rowSums(is.na(my_data)))  # mean(vector of NA counts per row)
nrow(my_data)
nrow(na.omit(my_data))
#head(my_data[ ,12],10)
# Remove or replace missing entries with a suitable identifier. Decide whether it is best to remove missing data or to recode it.
missing_vals <- sum(is.na(my_data))
attach(my_data)
my_data <- my_data[is.na(12), ]
missing_vals <- sum(is.na(my_data))
# Add a suitable title to each attribute of the data.
missing_vals <- sum(is.na(my_data))
attach(my_data)
my_data <- my_data[is.na(12), ]
missing_vals <- sum(is.na(my_data))
missing_vals
head(my_data, 10)
missing_vals <- sum(is.na(my_data))
missing_vals
missing_vals <- sum(is.na(my_data))
missing_vals
# Show the structure and first 10 rows of the dataframe containing all of the NIPostcode data.
str(my_data)
head(my_data, 10)
my_data = read.csv("C:/Users/user/Documents/Msc/Data Science/Files/NIPostcodes.csv")
# Show the structure and first 10 rows of the dataframe containing all of the NIPostcode data.
str(my_data)
head(my_data, 10)
# Show the total number and mean missing values of the NIPostcode data.
my_data[my_data == ""] <- NA # replace blanks with NA
head(my_data, 10)
missing_vals <- sum(is.na(my_data))
missing_vals
#complete_data <- complete.cases(my_data)
#complete_data
# Show sum of missing rows
missing_vals <- sum(is.na(my_data))
missing_vals
attach(my_data)
my_data <- my_data[is.na(12), ]
missing_vals <- sum(is.na(my_data))
missing_vals
head(my_data, 10)
attach(my_data)
my_data <- my_data[!is.na(12), ]
missing_vals <- sum(is.na(my_data))
missing_vals
head(my_data, 10)
my_data = read.csv("C:/Users/user/Documents/Msc/Data Science/Files/NIPostcodes.csv")
# Show the total number and mean missing values of the NIPostcode data.
my_data[my_data == ""] <- NA # replace blanks with NA
missing_vals <- sum(is.na(my_data))
missing_vals
attach(my_data)
my_data <- my_data[!is.na(12), ]
missing_vals <- sum(is.na(my_data))
missing_vals
head(my_data, 10)
# Add a suitable title to each attribute of the data.
#--Read CSV------------------------------------------------------------------------
my_data = read.csv("C:/Users/user/Documents/Msc/Data Science/Files/NIPostcodes.csv")
my_data[my_data == ""] <- NA # replace blanks with NA
attach(my_data)
nrows(my_data)
nrow(my_data)
my_data <- my_data[!is.na(12), ]
missing_vals <- sum(is.na(my_data))
nrow(my_data)
nrow(my_data)
my_data <- my_data[ ,!is.na(12)]
missing_vals <- sum(is.na(my_data))
nrow(my_data)
sum(my_data[, !is.na(12)])
# Add a suitable title to each attribute of the data.
cols <- c("Organisation_Name", "Sub-building_Name", "Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare", "Locality", "Townland", "Town", "County", "Postcode", "x-coordinates", "y-coordinates", "Primary_Key")
colnames(my_data) <- cols
head(my_data, 10)
str(my_data)
my_data <- my_data[!is.na(Postcode), ]
attach(my_data)
my_data <- my_data[!is.na(Postcode), ]
missing_vals <- sum(is.na(my_data))
nrow(my_data)
head(my_data, 10)
my_data = read.csv("C:/Users/user/Documents/Msc/Data Science/Files/NIPostcodes.csv")
my_data[my_data == ""] <- NA # replace blanks with NA
head(my_data, 10)
cols <- c("Organisation_Name", "Sub-building_Name", "Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare", "Locality", "Townland", "Town", "County", "Postcode", "x-coordinates", "y-coordinates", "Primary_Key")
colnames(my_data) <- cols
head(my_data, 10)
attach(my_data)
nrow(my_data)
#sum(my_data[, !is.na(12)])
my_data <- my_data[!is.na(Postcode), ]
#missing_vals <- sum(is.na(my_data))
nrow(my_data)
str(my_data)
my_data = read.csv("C:/Users/user/Documents/Msc/Data Science/Files/NIPostcodes.csv")
my_backup < my_data
cols <- c("Organisation_Name", "Sub-building_Name", "Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare", "Locality", "Townland", "Town", "County", "Postcode", "x-coordinates", "y-coordinates", "Primary_Key")
colnames(my_data) <- cols
head(my_data, 10)
str(my_data)
attach(my_data)
nrow(my_data)
#sum(my_data[, !is.na(12)])
my_data <- my_data[!is.na(Postcode), ]
#missing_vals <- sum(is.na(my_data))
nrow(my_data)
head(my_data, 10)
my_data[my_data == ""] <- NA # replace blanks with NA
attach(my_data)
nrow(my_data)
my_data <- my_data[!is.na(Postcode), ]
nrow(my_data)
head(my_data, 10)
my_data <- my_backup
my_data[my_data == ""] <- NA # replace blanks with NA
my_data = read.csv("C:/Users/user/Documents/Msc/Data Science/Files/NIPostcodes.csv")
my_backup <- my_data
my_data[my_data == ""] <- NA # replace blanks with NA
cols <- c("Organisation_Name", "Sub-building_Name", "Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare", "Locality", "Townland", "Town", "County", "Postcode", "x-coordinates", "y-coordinates", "Primary_Key")
colnames(my_data) <- cols
attach(my_data)
nrow(my_data)  # count before
my_data <- my_data[!is.na(Postcode), ]  # drop if Postcode = NA
nrow(my_data)  # count after
head(my_data, 10)
# Modify the County attribute to a categorising factor.
attach(my_data)
counties <- c("Antrim", "Armagh", "Derry", "Down", "Fermanagh", "Tyrone" )
categorised_county <- factor(County, levels = counties)
County <- categorised_county
str(my_data)
class(County)
my_data <- my_backup
my_data[my_data == ""] <- NA # replace blanks with NA
cols <- c("Organisation_Name", "Sub-building_Name", "Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare", "Locality", "Townland", "Town", "County", "Postcode", "x-coordinates", "y-coordinates", "Primary_Key")
colnames(my_data) <- cols
head(my_data, 10)
str(my_data)
class(County)
isfactor(County)
is.factor(County)
my_data = read.csv("C:/Users/user/Documents/Msc/Data Science/Files/NIPostcodes.csv")
my_backup <- my_data
my_data[my_data == ""] <- NA # replace blanks with NA
cols <- c("Organisation_Name", "Sub-building_Name", "Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare", "Locality", "Townland", "Town", "County", "Postcode", "x-coordinates", "y-coordinates", "Primary_Key")
colnames(my_data) <- cols
head(my_data, 10)
attach(my_data)
nrow(my_data)  # count before
my_data <- my_data[!is.na(Postcode), ]  # drop if Postcode = NA
nrow(my_data)  # count after
head(my_data, 10)
is.factor(County)
counties <- c("Antrim", "Armagh", "Derry", "Down", "Fermanagh", "Tyrone" )
categorised_county <- factor(County, levels = counties)
County <- categorised_county
str(my_data)
is.ordered(County)
attach(my_data)
is.factor(County)
counties <- c("Antrim", "Armagh", "Derry", "Down", "Tyrone" )
categorised_county <- factor(County, levels = counties)
County <- categorised_county
str(my_data)
my_data <- my_backup
str(my_data)
#counties <- c("Antrim", "Armagh", "Derry", "Down", "Fermanagh", "Tyrone" )
counties <- c("Antrim", "Armagh")
categorised_county <- factor(County, levels = counties)
respect.unordered.factors(my_data)
my_backup <- my_data
my_data[my_data == ""] <- NA # replace blanks with NA
cols <- c("Organisation_Name", "Sub-building_Name", "Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare", "Locality", "Townland", "Town", "County", "Postcode", "x-coordinates", "y-coordinates", "Primary_Key")
colnames(my_data) <- cols
head(my_data, 10)
nrow(my_data)  # count before
my_data <- my_data[!is.na(Postcode), ]  # drop if Postcode = NA
attach(my_data)
str(my_data)
my_backup2 <- my_data
my_backup2 <- my_data
counties <- c("ANTRIM", "Derry", "Armagh", "DOWN", "Fermanagh", "Tyrone" )
categorised_county <- factor(County, levels = counties)
County <- categorised_county
str(my_data)
is.factor(County)
is.ordered(County)
class(County)
# Align all attributes and relevant data.
LEVELS(County)
Levels(County)
County
head(County,10)
head(County,10)
my_data <- my_backup2
attach(my_data)
head(County, 10)
counties <- c("Antrim", "Derry", "Armagh", "Down", "Fermanagh", "Tyrone" )
categorised_county <- factor(County, levels = counties)
County <- categorised_county
head(County,10)
# Add a suitable title to each attribute of the data.
cols <- c("Organisation_Name", "Sub-building_Name", "Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare", "Locality", "Townland", "Town", "County", "Postcode", "x-coordinates", "y-coordinates", "Primary_Key")
colnames(my_data) <- cols
head(my_data, 10)
head(my_data$County, 10)
my_data <- my_data[!is.na(Postcode), ]  # drop if Postcode = NA
head(my_data$County, 10)
head(County, 10)
attach(my_data)
head(County, 10)
head(my_data$County, 10)
counties <- c("Antrim", "Derry", "Armagh", "Down", "Fermanagh", "Tyrone" )
categorised_county <- factor(County, levels = counties)
County <- categorised_county
head(my_data$County,10)
counties <- c("Antrim", "Derry", "Armagh", "DOWN", "Fermanagh", "Tyrone" )
categorised_county <- factor(County, levels = counties)
County <- categorised_county
head(my_data$County,10)
test_data <- my_data[c(15, 1:14)]
head(test_data)
my_data = read.csv("C:/Users/user/Documents/Msc/Data Science/Files/NIPostcodes.csv")
my_backup <- my_data
#my_data <- my_backup
# Show the structure and first 10 rows of the dataframe containing all of the NIPostcode data.
str(my_data)
head(my_data, 10)
# Show the total number and mean missing values of the NIPostcode data.
my_data[my_data == ""] <- NA # replace blanks with NA
head(my_data, 10)
missing_vals <- sum(is.na(my_data))
missing_vals
rowSum <- rowSums(is.na(my_data))
class(rowSum)
str(rowSum)
mean(rowSum)
sum(rowSum)
mean(rowSums(is.na(my_data)))  # mean(vector of NA counts per row)
nrow(my_data)
nrow(na.omit(my_data))
# Add a suitable title to each attribute of the data.
cols <- c("Organisation_Name", "Sub-building_Name", "Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare", "Locality", "Townland", "Town", "County", "Postcode", "x-coordinates", "y-coordinates", "Primary_Key")
colnames(my_data) <- cols
head(my_data, 10)
str(my_data)
head(my_data$County, 10)
class(County)
#head(my_data[ ,12],10)
# Remove or replace missing entries with a suitable identifier. Decide whether it is best to remove missing data or to recode it.
attach(my_data)
nrow(my_data)  # count before
my_data <- my_data[!is.na(Postcode), ]  # drop if Postcode = NA
nrow(my_data)  # count after
head(my_data, 10)
# Modify the County attribute to a categorising factor.
my_data <- my_backup2
attach(my_data)
head(my_data$County, 10)
counties <- c("Antrim", "Derry", "Armagh", "Down", "Fermanagh", "Tyrone" )
categorised_county <- factor(County, levels = counties)
County <- categorised_county
head(my_data$County, 10)
# Align all attributes and relevant data.
head(my_data)
my_data <- my_data[c(15, 1:14)]
head((my_data) # Move the primary key identifier to the start of the dataset. # Create a new dataset called Limavady_data. Store within it only information that has locality, townland and town containing the name “Limavady”. Store this information in an external csv file called Limavady. limavady_data <- data.frame(my_data[Town == "LIMAVADY",])
head(limavady_data, 10)
source("~/Msc/Data Science/repos/DataScience/Lab2 NI Postcodes/script.R", echo = TRUE, encoding = "Windows-1252")
head((my_data) head(my_data)
head(my_data)
my_data <- my_backup
str(my_data)
my_data = read.csv("C:/Users/user/Documents/Msc/Data Science/Files/NIPostcodes.csv")
my_backup <- my_data
#my_data <- my_backup
# Show the structure and first 10 rows of the dataframe containing all of the NIPostcode data.
str(my_data)
head(my_data, 10)
# Show the total number and mean missing values of the NIPostcode data.
my_data[my_data == ""] <- NA # replace blanks with NA
head(my_data, 10)
missing_vals <- sum(is.na(my_data))
missing_vals
rowSum <- rowSums(is.na(my_data))
class(rowSum)
str(rowSum)
mean(rowSum)
sum(rowSum)
mean(rowSums(is.na(my_data)))  # mean(vector of NA counts per row)
nrow(my_data)
nrow(na.omit(my_data))
# Add a suitable title to each attribute of the data.
cols <- c("Organisation_Name", "Sub-building_Name", "Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare", "Locality", "Townland", "Town", "County", "Postcode", "x-coordinates", "y-coordinates", "Primary_Key")
colnames(my_data) <- cols
head(my_data, 10)
str(my_data)
head(my_data$County, 10)
class(County)
#head(my_data[ ,12],10)
# Remove or replace missing entries with a suitable identifier. Decide whether it is best to remove missing data or to recode it.
attach(my_data)
nrow(my_data)  # count before
my_data <- my_data[!is.na(Postcode), ]  # drop if Postcode = NA
nrow(my_data)  # count after
head(my_data, 10)
# Modify the County attribute to a categorising factor.
my_data <- my_backup2
attach(my_data)
head(my_data$County, 10)
counties <- c("Antrim", "Derry", "Armagh", "Down", "Fermanagh", "Tyrone" )
categorised_county <- factor(County, levels = counties)
County <- categorised_county
my_backup2 <- my_data
head(my_data$County, 10)
# Align all attributes and relevant data.
my_data <- my_backup
str(my_data)
my_data <- my_data[c(15, 1:14)]
str(my_data)
my_data = read.csv("C:/Users/user/Documents/Msc/Data Science/Files/NIPostcodes.csv")
my_backup <- my_data
#my_data <- my_backup
# Show the structure and first 10 rows of the dataframe containing all of the NIPostcode data.
str(my_data)
head(my_data, 10)
# Show the total number and mean missing values of the NIPostcode data.
my_data[my_data == ""] <- NA # replace blanks with NA
head(my_data, 10)
missing_vals <- sum(is.na(my_data))
missing_vals
rowSum <- rowSums(is.na(my_data))
class(rowSum)
str(rowSum)
mean(rowSum)
sum(rowSum)
mean(rowSums(is.na(my_data)))  # mean(vector of NA counts per row)
nrow(my_data)
nrow(na.omit(my_data))
# Add a suitable title to each attribute of the data.
cols <- c("Organisation_Name", "Sub-building_Name", "Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare", "Locality", "Townland", "Town", "County", "Postcode", "x-coordinates", "y-coordinates", "Primary_Key")
colnames(my_data) <- cols
head(my_data, 10)
str(my_data)
head(my_data$County, 10)
class(County)
#head(my_data[ ,12],10)
# Remove or replace missing entries with a suitable identifier. Decide whether it is best to remove missing data or to recode it.
attach(my_data)
nrow(my_data)  # count before
my_data <- my_data[!is.na(Postcode), ]  # drop if Postcode = NA
nrow(my_data)  # count after
head(my_data, 10)
# Modify the County attribute to a categorising factor.
my_data <- my_backup2
attach(my_data)
head(my_data$County, 10)
counties <- c("Antrim", "Derry", "Armagh", "Down", "Fermanagh", "Tyrone" )
categorised_county <- factor(County, levels = counties)
County <- categorised_county
my_backup2 <- my_data
head(my_data$County, 10)
# Align all attributes and relevant data.
str(my_data)
my_data <- my_data[c(15, 1:14)]
str(my_data)
#Townland
limavady_data <- data.frame(my_data[Town == "LIMAVADY" & Locality == "LIMAVADY", ])
head(limavady_data, 10)
limavady_data <- data.frame(my_data[Town == "LIMAVADY",])
#Locality
#Townland
#limavady_data <- data.frame(my_data[Town == "LIMAVADY" & Locality == "LIMAVADY", ])
head(limavady_data, 10)
limavady_data <- data.frame(my_data[Town == "LIMAVADY" & Locality == "LIMAVADY", ])
head(limavady_data, 10)
limavady_data <- subset(my_data, Town == "LIMAVADY" & Locality == "LIMAVADY")
head(limavady_data, 10)
attact(my_data)
limavady_data <- subset(my_data, Town == "LIMAVADY" & Locality == "LIMAVADY" & Townland == "LIMAVADY")
head(limavady_data, 10)
attach(my_data)
limavady_data <- subset(my_data, Town == "LIMAVADY" & Locality == "LIMAVADY" & Townland == "LIMAVADY")
head(limavady_data, 10)
attach(my_data)
limavady_data <- subset(my_data, Town == "LIMAVADY" & Locality == "LIMAVADY")
head(limavady_data, 10)
grep("new", smy_data$Townloan)
limavady_data <- grep("new", smy_data$Townloan)  # match the pattern of limavady first
limavady_data <- subset(my_data, Town == "LIMAVADY" & Locality == "LIMAVADY")  # further refine by town and locality
head(limavady_data, 10)
limavady_data <- grep("limavady", my_data$Townloan) # match the pattern of limavady first
head(limavady_data, 10)
limavady_data <- grep("limavady", my_data$Townloan) # match the pattern of limavady first
head(limavady_data, 10)
limavady_data <- grep("limavady", my_data$Townland) # match the pattern of limavady first
head(limavady_data, 10)
limavady_data <- grep("limavady", my_data$Town) # match the pattern of limavady first
head(limavady_data, 10)
limavady_data <- grep("limavady", ignore.case = TRUE, my_data$Town) # match the pattern of limavady first
head(limavady_data, 10)
limavady_data <- subset(my_data, Town == "LIMAVADY" & Locality == "LIMAVADY")  # further refine by town and locality
head(limavady_data, 10)
limavady_data <- grep("limavady", ignore.case = TRUE, my_data$Townland) # match the pattern of limavady first
head(limavady_data, 10)
limavady_data <- subset(my_data, Town == "LIMAVADY" & Locality == "LIMAVADY")  # further refine by town and locality
head(limavady_data, 10)
limavady_data <- grep("limavady", ignore.case = TRUE, my_data$Townland) # match the pattern of limavady first
head(limavady_data, 10)
limavady_data <- my_data[subset(my_data, Town == "LIMAVADY" & Locality == "LIMAVADY"), ]
head(limavady_data, 10)
limavady_data <- my_data[grep("limavady", ignore.case = TRUE, my_data$Townland), ] # match the pattern of limavady first
head(limavady_data, 10)
limavady_data <- subset(my_data, Town == "LIMAVADY" & Locality == "LIMAVADY")  # further refine by town and locality
head(limavady_data, 10)
nrow(limavady)
nrow(limavady_data)
limavady_data <- my_data[grep("limavady", ignore.case = TRUE, my_data$Townland),] # match the pattern of limavady in townland first
limavady_data <- my_data[grep("limavady", ignore.case = TRUE, my_data$Locality),] # match the pattern of limavady in townland first
limavady_data <- subset(limavady_data, Town == "LIMAVADY" & Locality == "LIMAVADY")  # further refine by town and locality
head(limavady_data, 10)
nrow(limavady_data)
head(limavady_data)
limavady_data <- subset(my_data, Town == "LIMAVADY" | Locality == "LIMAVADY" | Townland == "LIMAVADY")  # further refine by town and locality
head(limavady_data, 10)
nrow(limavady_data)
limavady_data <- subset(my_data, Townland == "LIMAVADY")  # further refine by town and locality
head(limavady_data, 10)
limavady_data <- subset(my_data, grep("limavady", ignore.case = TRUE, my_data$Townland)) # further refine by town and locality
str_detect(my_data$Locality, "limavady")
library(stringr)
str_detect(my_data$Locality, "limavady")
limavady_data <- subset(my_data, Town == "LIMAVADY" & str_detect(my_data$Locality, "limavady") & str_detect(my_data$Townland, "limavady")) # further refine by town and locality
#--Read CSV------------------------------------------------------------------------
my_data = read.csv("C:/Users/user/Documents/Msc/Data Science/Files/NIPostcodes.csv")
# Show the structure and first 10 rows of the dataframe containing all of the NIPostcode data.
str(my_data)
head(my_data, 10)
# Show the total number and mean missing values of the NIPostcode data.
my_data[my_data == ""] <- NA # replace blanks with NA
head(my_data, 10)
missing_vals <- sum(is.na(my_data))
missing_vals
rowSum <- rowSums(is.na(my_data))
class(rowSum)
str(rowSum)
mean(rowSum)
sum(rowSum)
mean(rowSums(is.na(my_data)))  # mean(vector of NA counts per row)
nrow(my_data)
nrow(na.omit(my_data))
# Add a suitable title to each attribute of the data.
cols <- c("Organisation_Name", "Sub-building_Name", "Building_Name", "Number", "Primary_Thorfare", "Alt_Thorfare", "Secondary_Thorfare", "Locality", "Townland", "Town", "County", "Postcode", "x-coordinates", "y-coordinates", "Primary_Key")
colnames(my_data) <- cols
head(my_data, 10)
str(my_data)
head(my_data$County, 10)
class(County)
#head(my_data[ ,12],10)
# Remove or replace missing entries with a suitable identifier. Decide whether it is best to remove missing data or to recode it.
attach(my_data)
nrow(my_data)  # count before
my_data <- my_data[!is.na(Postcode), ]  # drop if Postcode = NA
nrow(my_data)  # count after
head(my_data, 10)
# Modify the County attribute to a categorising factor.
my_data <- my_backup2
attach(my_data)
head(my_data$County, 10)
counties <- c("Antrim", "Derry", "Armagh", "Down", "Fermanagh", "Tyrone" )
categorised_county <- factor(County, levels = counties)
County <- categorised_county
my_backup2 <- my_data
head(my_data$County, 10)
# Align all attributes and relevant data.
str(my_data)
my_data <- my_data[c(15, 1:14)]
str(my_data)
# Move the primary key identifier to the start of the dataset.
# Create a new dataset called Limavady_data. Store within it only information that has locality, townland and town containing the name “Limavady”. Store this information in an external csv file called Limavady.
attach(my_data)
#limavady_data <- my_data[grep("limavady", ignore.case = TRUE, my_data$Townland),] # match the pattern of limavady in townland first
#limavady_data <- my_data[grep("limavady", ignore.case = TRUE, my_data$Locality),] # match the pattern of limavady in townland first
#head(limavady_data)
#limavady_data <- subset(my_data, Town == "LIMAVADY" | Locality == "LIMAVADY" |  Townland == "LIMAVADY") # further refine by town and locality
library(stringr)
#str_detect(my_data$Locality, "limavady")
limavady_data <- subset(my_data, Town == "LIMAVADY" & str_detect(my_data$Locality, "limavady") & str_detect(my_data$Townland, "limavady")) # further refine by town and locality
head(limavady_data, 10)
limavady_data <- subset(my_data, Town == "LIMAVADY")
nrow(limavady_data)
limavady_data <- subset(my_data, str_detect(my_data$Locality, "limavady"))
nrow(limavady_data)
limavady_data <- subset(my_data, str_detect(my_data$Townland, "limavady"))
nrow(limavady_data)
str_detect(my_data$Locality, "limavady")
str_detect(my_data$Locality, "limavady")
test <- "dfgfd  dfg limavady df"
str_detect(test, "limavady")
test <- "dfgfd  dfg lmavady df"
str_detect(test, "limavady")
str_detect(my_data$Locality, "BALLINTOY")
grep("limavady", ignore.case = TRUE, my_data$Locality)
grep("limavady", ignore.case = TRUE, my_data$Town)
grep("limavady", ignore.case = TRUE, my_data$Townland)
limavady_data <- subset(grep("limavady", ignore.case = TRUE, my_data$Townland))
limavady_data <- subset(my_data, grep("limavady", ignore.case = TRUE, my_data$Townland))
limavady_data <- my_data[grep("limavady", ignore.case = TRUE, my_data$Townland), ]
head(limavady_data, 10)
limavady_data <- my_data[grep("limavady", ignore.case = TRUE, my_data$Townland) & grep("limavady", ignore.case = TRUE, my_data$Town) ,]
limavady_data <- my_data[grep("limavady", ignore.case = TRUE, my_data$Townland)  ,]
head(limavady_data, 10)
limavady_data <- my_data[grep("limavady", ignore.case = TRUE, my_data$Townland) & grep("limavady", ignore.case = TRUE, my_data$Town),]
limavady_data <- my_data[Town == "LIMAVADY" | Locality == "LIMAVADY" | Townland == "LIMAVADY", ]
head(limavady_data, 10)
nrow(limavady_data)
limavady_data <- my_data[Town == "LIMAVADY" | Locality == "LIMAVADY" | Townland == "LIMAVADY", ]
head(limavady_data, 10)
nrow(limavady_data)
limavady_data <- my_data[Town == "LIMAVADY" , ]
head(limavady_data, 10)
nrow(limavady_data)
limavady_data <- my_data[Town == "LIMAVADY" , ]
head(limavady_data, 10)
nrow(limavady_data)
limavady_data <- my_data[Town == "LIMAVADY", ]
head(limavady_data, 10)
nrow(limavady_data)
limavady_data <- my_data[grep("limavady", ignore.case = TRUE, my_data$Townland),] # match the pattern of limavady in townland first
head(limavady_data)
limavady_data <- my_data[grep("limavady", ignore.case = TRUE, my_data$Locality),] # match the pattern of limavady in townland first
head(limavady_data)
limavady_data <- my_data[grep("limavady", ignore.case = TRUE, my_data$Townland),] # match the pattern of limavady in townland first
head(limavady_data)
nrow(limavady_data)
limavady_data <- my_data[grep("limavady", ignore.case = TRUE, my_data$Locality),] # match the pattern of limavady in townland first
head(limavady_data)
nrow(limavady_data)
limavady_data <- my_data[grep("limavady", ignore.case = TRUE, my_data$Townland),] # match the pattern of limavady in townland first
head(limavady_data)
nrow(limavady_data)
limavady_data <- my_data[grep("limavady", ignore.case = TRUE, my_data$Locality),] # match the pattern of limavady in townland first
head(limavady_data)
nrow(limavady_data)
limavady_data <- subset(limavady_data, Town == "LIMAVADY") # further refine by town and locality
head(limavady_data, 10)
nrow(limavady_data)
limavady_data
limavady_data(8, 9, 10)
limavady_data[, c(8, 9, 10)]
limavady_data[, c(9, 10, 11)]
limavady_data <- my_data[grep("limavady", ignore.case = TRUE, my_data$Townland),] # match the pattern of limavady in townland first
head(limavady_data)
nrow(limavady_data)
limavady_data <- limavady_data[grep("limavady", ignore.case = TRUE, my_data$Locality),] # match the pattern of limavady in townland first
head(limavady_data)
nrow(limavady_data)
limavady_data <- subset(limavady_data, Town == "LIMAVADY") # further refine by town and locality
head(limavady_data, 10)
limavady_data <- my_data[grep("limavady", ignore.case = TRUE, my_data$Townland),] # match the pattern of limavady in townland first
head(limavady_data)
nrow(limavady_data)
limavady_data <- limavady_data[grep("limavady", ignore.case = TRUE, my_data$Locality),] # match the pattern of limavady in townland first
head(limavady_data)
nrow(limavady_data)
limavady_data <- my_data[grep("limavady", ignore.case = TRUE, my_data$Townland),] # match the pattern of limavady in townland first
head(limavady_data)
nrow(limavady_data)
limavady_data <- limavady_data[grep("limavady", ignore.case = TRUE, limavady$Locality),] # match the pattern of limavady in townland first
head(limavady_data)
nrow(limavady_data)
limavady_data <- subset(limavady_data, Town == "LIMAVADY") # further refine by town and locality
head(limavady_data, 10)
nrow(limavady_data)
limavady_data[, c(9, 10, 11)]
limavady_data <- my_data[grep("limavady", ignore.case = TRUE, my_data$Townland),] # match the pattern of limavady in townland first
head(limavady_data)
nrow(limavady_data)
limavady_data <- limavady_data[grep("limavady", ignore.case = TRUE, limavady$Locality),] # match the pattern of limavady in townland first
limavady_data <- my_data[grep("limavady", ignore.case = TRUE, my_data$Townland),] # match the pattern of limavady in townland first
head(limavady_data)
nrow(limavady_data)
limavady_data <- limavady_data[grep("limavady", ignore.case = TRUE, limavady_data$Locality),] # match the pattern of limavady in townland first
head(limavady_data)
nrow(limavady_data)
limavady_data <- subset(limavady_data, Town == "LIMAVADY") # further refine by town and locality
head(limavady_data, 10)
nrow(limavady_data)
head(limavady_data, 10)
nrow(limavady_data)
head(limavady_data, 10)
nrow(limavady_data)
limavady_data[, c(9, 10, 11)]
limavady_data[, c(9, 10, 11)]
nrow(limavady_data)
head(limavady_data[, c(9, 10, 11)],10)
nrow(limavady_data)
write.csv(limavady_data, file = "limavady.csv", quote = FALSE, na = "", row.names = FALSE)
write.csv(limavady_data, file = "C:/Users/user/Documents/Msc/Data Science/Files/limavady.csv", quote = FALSE, na = " ", row.names = FALSE)
write.csv(my_data, file = "C:/Users/user/Documents/Msc/Data Science/Files/CleanNIPostcodeData.csv", quote = FALSE, na = " ", row.names = FALSE)
